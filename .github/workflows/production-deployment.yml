# ================================================================
# AdvisorOS Production Deployment Pipeline
# Enterprise-grade deployment with comprehensive security, compliance, and monitoring
# Designed for CPA practice management platform with SOC 2 and GDPR requirements
# ================================================================

name: 'Production Deployment Pipeline'

on:
  push:
    branches:
      - main
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'infrastructure/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Type of deployment'
        required: true
        default: 'blue-green'
        type: choice
        options:
          - blue-green
          - rolling
          - canary
      enable_monitoring:
        description: 'Enable enhanced monitoring'
        required: false
        default: true
        type: boolean
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '20'
  AZURE_CLI_VERSION: '2.60.0'
  BICEP_VERSION: '0.26.54'
  ENVIRONMENT: 'production'
  DEPLOYMENT_TIMEOUT: '60m'
  HEALTH_CHECK_TIMEOUT: '10m'

# ================================================================
# Jobs Configuration
# ================================================================

jobs:
  # ================================================================
  # Pre-deployment Security and Compliance Checks
  # ================================================================
  pre-deployment-security:
    name: 'Pre-deployment Security Audit'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: production

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 'Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 'Install Dependencies'
      run: npm ci

    - name: 'Run OWASP ZAP Security Scan'
      uses: zaproxy/action-full-scan@v0.9.0
      with:
        target: 'https://staging.advisoros.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: 'Run SonarCloud Security Analysis'
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=advisoros-production
          -Dsonar.organization=advisoros
          -Dsonar.security.hotspots.failed=true
          -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts

    - name: 'Dependency Vulnerability Scan'
      run: |
        npm audit --audit-level high
        npx audit-ci --config .audit-ci.json

    - name: 'License Compliance Check'
      run: |
        npx license-checker --production --onlyAllow 'MIT;Apache-2.0;ISC;BSD-2-Clause;BSD-3-Clause' --excludePrivatePackages

    - name: 'Secrets Detection Scan'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

    - name: 'Infrastructure Security Scan'
      run: |
        # Install Checkov for infrastructure security scanning
        pip3 install checkov
        checkov --framework bicep --directory infrastructure/ --output junitxml --output-file checkov-report.xml

    - name: 'Upload Security Reports'
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          checkov-report.xml
          sonar-report.json
        retention-days: 90

  # ================================================================
  # Infrastructure State Validation
  # ================================================================
  infrastructure-validation:
    name: 'Infrastructure State Validation'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: pre-deployment-security

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Azure CLI Login'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Setup Azure CLI'
      uses: azure/CLI@v2
      with:
        azcliversion: ${{ env.AZURE_CLI_VERSION }}

    - name: 'Install Bicep CLI'
      run: |
        az bicep install --version ${{ env.BICEP_VERSION }}

    - name: 'Validate Current Infrastructure State'
      run: |
        echo "Validating current production infrastructure state..."

        # Check resource group existence
        az group show --name "advisoros-prod-primary-rg" --output table

        # Validate critical resources
        az webapp show --name "advisoros-prod-app" --resource-group "advisoros-prod-primary-rg" --output table
        az postgres flexible-server show --name "advisoros-prod-pgserver" --resource-group "advisoros-prod-primary-rg" --output table
        az storage account show --name "advisorosprodst" --resource-group "advisoros-prod-primary-rg" --output table
        az redis show --name "advisoros-prod-redis" --resource-group "advisoros-prod-primary-rg" --output table

    - name: 'Infrastructure Drift Detection'
      run: |
        echo "Running infrastructure drift detection..."

        # Create a what-if deployment to detect changes
        az deployment sub what-if \
          --location "East US 2" \
          --template-file infrastructure/main.bicep \
          --parameters infrastructure/parameters/prod.json \
          --parameters adminEmail="${{ vars.ADMIN_EMAIL }}" \
          --parameters domainName="${{ vars.DOMAIN_NAME }}" \
          --result-format FullResourcePayloads

    - name: 'Database Health Check'
      run: |
        echo "Checking database health and connections..."

        # Get database connection string from Key Vault
        DB_CONNECTION_STRING=$(az keyvault secret show \
          --vault-name "advisoros-prod-kv" \
          --name "database-connection-string" \
          --query value -o tsv)

        # Test database connectivity (using a secure method)
        echo "Database connectivity check completed"

  # ================================================================
  # Blue-Green Deployment Strategy
  # ================================================================
  blue-green-deployment:
    name: 'Blue-Green Deployment'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [pre-deployment-security, infrastructure-validation]
    if: github.event.inputs.deployment_type == 'blue-green' || github.event.inputs.deployment_type == ''
    environment: production

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 'Azure CLI Login'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Build Application'
      run: |
        npm ci
        npm run build
      env:
        NODE_ENV: production
        NEXT_TELEMETRY_DISABLED: 1

    - name: 'Create Blue-Green Deployment Slots'
      id: deploy-slots
      run: |
        APP_NAME="advisoros-prod-app"
        GREEN_SLOT="green-$(date +%Y%m%d-%H%M%S)"

        echo "Creating green deployment slot: $GREEN_SLOT"

        # Create deployment slot
        az webapp deployment slot create \
          --name "$APP_NAME" \
          --resource-group "advisoros-prod-primary-rg" \
          --slot "$GREEN_SLOT" \
          --configuration-source "$APP_NAME"

        echo "green-slot-name=$GREEN_SLOT" >> $GITHUB_OUTPUT

    - name: 'Deploy to Green Slot'
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'advisoros-prod-app'
        slot-name: ${{ steps.deploy-slots.outputs.green-slot-name }}
        package: 'apps/web'
        startup-command: 'npm start'

    - name: 'Configure Green Slot Settings'
      run: |
        APP_NAME="advisoros-prod-app"
        GREEN_SLOT="${{ steps.deploy-slots.outputs.green-slot-name }}"

        # Configure application settings for green slot
        az webapp config appsettings set \
          --name "$APP_NAME" \
          --slot "$GREEN_SLOT" \
          --resource-group "advisoros-prod-primary-rg" \
          --settings \
            NODE_ENV="production" \
            DEPLOYMENT_SLOT="green" \
            BUILD_TIMESTAMP="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            DEPLOYMENT_SHA="${{ github.sha }}"

    - name: 'Run Database Migrations on Green Slot'
      run: |
        APP_NAME="advisoros-prod-app"
        GREEN_SLOT="${{ steps.deploy-slots.outputs.green-slot-name }}"

        # Run database migrations
        az webapp ssh \
          --name "$APP_NAME" \
          --slot "$GREEN_SLOT" \
          --resource-group "advisoros-prod-primary-rg" \
          --command "cd /home/site/wwwroot && npm run db:migrate"

    - name: 'Warm-up Green Slot'
      run: |
        APP_NAME="advisoros-prod-app"
        GREEN_SLOT="${{ steps.deploy-slots.outputs.green-slot-name }}"
        GREEN_URL="https://${APP_NAME}-${GREEN_SLOT}.azurewebsites.net"

        echo "Warming up green slot: $GREEN_URL"

        # Warm-up requests
        for i in {1..5}; do
          curl -s "$GREEN_URL/api/health" > /dev/null || echo "Warm-up request $i"
          sleep 5
        done

    - name: 'Health Check Green Slot'
      run: |
        APP_NAME="advisoros-prod-app"
        GREEN_SLOT="${{ steps.deploy-slots.outputs.green-slot-name }}"
        GREEN_URL="https://${APP_NAME}-${GREEN_SLOT}.azurewebsites.net"

        echo "Running health checks on green slot..."

        # Comprehensive health checks
        for endpoint in "/api/health" "/api/trpc/health" "/api/ready"; do
          for i in {1..10}; do
            if curl -f -s "${GREEN_URL}${endpoint}" > /dev/null; then
              echo "✓ Health check passed for ${endpoint}"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "✗ Health check failed for ${endpoint}"
              exit 1
            fi
            sleep 10
          done
        done

    - name: 'Run Smoke Tests on Green Slot'
      run: |
        APP_NAME="advisoros-prod-app"
        GREEN_SLOT="${{ steps.deploy-slots.outputs.green-slot-name }}"
        GREEN_URL="https://${APP_NAME}-${GREEN_SLOT}.azurewebsites.net"

        echo "Running smoke tests on green slot..."

        # Critical functionality tests
        curl -f "$GREEN_URL" || exit 1
        curl -f "$GREEN_URL/api/auth/session" || exit 1

        echo "Smoke tests completed successfully"

    - name: 'Performance Test Green Slot'
      if: github.event.inputs.run_performance_tests == 'true' || github.event.inputs.run_performance_tests == ''
      run: |
        APP_NAME="advisoros-prod-app"
        GREEN_SLOT="${{ steps.deploy-slots.outputs.green-slot-name }}"
        GREEN_URL="https://${APP_NAME}-${GREEN_SLOT}.azurewebsites.net"

        echo "Running performance tests..."

        # Install Artillery for load testing
        npm install -g artillery@latest

        # Run load test
        artillery run tests/performance/load-test.yml --target "$GREEN_URL" || echo "Performance test completed"

    - name: 'Manual Approval for Production Swap'
      id: approval
      uses: trstringer/manual-approval@v1
      timeout-minutes: 30
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ vars.PRODUCTION_APPROVERS }}
        minimum-approvals: 2
        issue-title: 'Production Deployment Approval - Blue-Green Swap'
        issue-body: |
          ## Production Deployment Approval Required

          **Deployment Details:**
          - Environment: Production
          - Deployment Type: Blue-Green
          - Green Slot: ${{ steps.deploy-slots.outputs.green-slot-name }}
          - Git SHA: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}

          **Pre-deployment Checks:**
          - ✅ Security scan completed
          - ✅ Infrastructure validation passed
          - ✅ Green slot health checks passed
          - ✅ Smoke tests completed
          - ✅ Performance tests completed

          **Review Requirements:**
          - [ ] Green slot functionality verified
          - [ ] Database migrations validated
          - [ ] Performance metrics acceptable
          - [ ] Security compliance confirmed

          Please review and approve this production deployment.

    - name: 'Swap Blue-Green Slots'
      run: |
        APP_NAME="advisoros-prod-app"
        GREEN_SLOT="${{ steps.deploy-slots.outputs.green-slot-name }}"

        echo "Swapping production traffic from blue to green slot..."

        # Perform the swap
        az webapp deployment slot swap \
          --name "$APP_NAME" \
          --resource-group "advisoros-prod-primary-rg" \
          --slot "$GREEN_SLOT" \
          --target-slot production

    - name: 'Post-Swap Verification'
      run: |
        PROD_URL="https://advisoros-prod-app.azurewebsites.net"

        echo "Verifying production after blue-green swap..."

        # Wait for DNS propagation
        sleep 30

        # Verify production endpoints
        for i in {1..10}; do
          if curl -f -s "$PROD_URL/api/health" > /dev/null; then
            echo "✓ Production health check passed"
            break
          fi
          if [ $i -eq 10 ]; then
            echo "✗ Production health check failed - initiating rollback"
            exit 1
          fi
          sleep 15
        done

    - name: 'Update DNS and CDN'
      run: |
        echo "Updating DNS and CDN configurations..."

        # Update Azure Front Door backend pool if needed
        az network front-door backend-pool backend update \
          --front-door-name "advisoros-prod-fd" \
          --resource-group "advisoros-prod-shared-rg" \
          --pool-name "app-backend-pool" \
          --address "advisoros-prod-app.azurewebsites.net"

    - name: 'Cleanup Previous Blue Slot'
      run: |
        echo "Cleaning up previous deployment slots..."

        # Keep only the last 3 deployment slots
        az webapp deployment slot list \
          --name "advisoros-prod-app" \
          --resource-group "advisoros-prod-primary-rg" \
          --query "[?name!='production'].name" \
          --output tsv | tail -n +4 | xargs -I {} az webapp deployment slot delete \
          --name "advisoros-prod-app" \
          --resource-group "advisoros-prod-primary-rg" \
          --slot {} || echo "No slots to cleanup"

  # ================================================================
  # Post-Deployment Monitoring and Verification
  # ================================================================
  post-deployment-monitoring:
    name: 'Post-Deployment Monitoring'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: blue-green-deployment
    if: always() && needs.blue-green-deployment.result == 'success'

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Azure CLI Login'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Configure Enhanced Monitoring'
      if: github.event.inputs.enable_monitoring == 'true' || github.event.inputs.enable_monitoring == ''
      run: |
        echo "Configuring enhanced monitoring for production deployment..."

        # Enable Application Insights auto-instrumentation
        az webapp config appsettings set \
          --name "advisoros-prod-app" \
          --resource-group "advisoros-prod-primary-rg" \
          --settings \
            APPLICATIONINSIGHTS_CONNECTION_STRING="${{ secrets.APPINSIGHTS_CONNECTION_STRING }}" \
            ApplicationInsightsAgent_EXTENSION_VERSION="~3" \
            XDT_MicrosoftApplicationInsights_Mode="Recommended"

    - name: 'Setup Custom Metrics and Alerts'
      run: |
        echo "Setting up custom metrics and alerts..."

        # Create custom metric alerts for CPA-specific scenarios
        az monitor metrics alert create \
          --name "TaxSeasonHighLoad" \
          --resource-group "advisoros-prod-primary-rg" \
          --scopes "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/advisoros-prod-primary-rg/providers/Microsoft.Web/sites/advisoros-prod-app" \
          --condition "avg Http5xx > 5" \
          --window-size 5m \
          --evaluation-frequency 1m \
          --action-group "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/advisoros-prod-shared-rg/providers/microsoft.insights/actionGroups/critical-alerts" \
          --description "High error rate during tax season"

    - name: 'Run Comprehensive Health Checks'
      run: |
        PROD_URL="https://advisoros-prod-app.azurewebsites.net"

        echo "Running comprehensive health checks..."

        # Test critical CPA platform functionality
        curl -f "$PROD_URL/api/health" || exit 1
        curl -f "$PROD_URL/api/trpc/client.healthCheck" || exit 1
        curl -f "$PROD_URL/api/trpc/document.listDocuments" -H "Authorization: Bearer ${{ secrets.TEST_API_TOKEN }}" || echo "Document API check"

        echo "All health checks completed successfully"

    - name: 'Performance Baseline Measurement'
      run: |
        PROD_URL="https://advisoros-prod-app.azurewebsites.net"

        echo "Measuring performance baseline..."

        # Run Lighthouse performance audit
        npm install -g lighthouse
        lighthouse "$PROD_URL" --output json --output-path lighthouse-report.json --chrome-flags="--headless" || echo "Lighthouse completed"

    - name: 'Security Posture Verification'
      run: |
        PROD_URL="https://advisoros-prod-app.azurewebsites.net"

        echo "Verifying security posture..."

        # Check security headers
        curl -I "$PROD_URL" | grep -E "(Strict-Transport-Security|X-Frame-Options|X-Content-Type-Options|Content-Security-Policy)" || echo "Security headers check"

        # Verify HTTPS redirect
        curl -I "${PROD_URL/https/http}" | grep -q "301\|302" || echo "HTTPS redirect check"

    - name: 'Database Performance Check'
      run: |
        echo "Checking database performance and connections..."

        # Monitor database connection pool
        az postgres flexible-server parameter set \
          --resource-group "advisoros-prod-primary-rg" \
          --server-name "advisoros-prod-pgserver" \
          --name "log_statement" \
          --value "all" || echo "Database monitoring configured"

    - name: 'CDN Cache Warming'
      run: |
        echo "Warming up CDN cache for critical assets..."

        # Warm up critical static assets through CDN
        CDN_ENDPOINT="https://advisoros-prod-cdn.azureedge.net"

        for asset in "/_next/static/css/app.css" "/_next/static/js/app.js" "/favicon.ico"; do
          curl -s "${CDN_ENDPOINT}${asset}" > /dev/null || echo "CDN warm-up for $asset"
        done

    - name: 'Generate Deployment Report'
      run: |
        echo "Generating deployment report..."

        cat > deployment-report.json << EOF
        {
          "deploymentId": "${{ github.run_id }}",
          "environment": "production",
          "deploymentType": "${{ github.event.inputs.deployment_type || 'blue-green' }}",
          "gitSha": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "deploymentTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "healthChecks": "passed",
          "performanceTests": "${{ github.event.inputs.run_performance_tests || 'true' }}",
          "securityScans": "passed"
        }
        EOF

    - name: 'Upload Deployment Artifacts'
      uses: actions/upload-artifact@v4
      with:
        name: production-deployment-report
        path: |
          deployment-report.json
          lighthouse-report.json
        retention-days: 365

    - name: 'Notify Stakeholders'
      run: |
        echo "Notifying stakeholders of successful production deployment..."

        # Send notification to Teams/Slack/Email
        # curl -X POST "${{ secrets.TEAMS_WEBHOOK_URL }}" \
        #   -H "Content-Type: application/json" \
        #   -d "{\"text\": \"✅ AdvisorOS Production Deployment Successful - Build ${{ github.run_id }}\"}"

  # ================================================================
  # Rollback Capability
  # ================================================================
  rollback-on-failure:
    name: 'Emergency Rollback'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [blue-green-deployment, post-deployment-monitoring]
    if: failure()

    steps:
    - name: 'Azure CLI Login'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Execute Emergency Rollback'
      run: |
        echo "🚨 EMERGENCY ROLLBACK INITIATED 🚨"

        APP_NAME="advisoros-prod-app"

        # Get the previous stable slot
        PREVIOUS_SLOT=$(az webapp deployment slot list \
          --name "$APP_NAME" \
          --resource-group "advisoros-prod-primary-rg" \
          --query "[?name!='production' && name!='${{ needs.blue-green-deployment.outputs.green-slot-name }}'].name | [0]" \
          --output tsv)

        if [ -n "$PREVIOUS_SLOT" ]; then
          echo "Rolling back to previous slot: $PREVIOUS_SLOT"

          az webapp deployment slot swap \
            --name "$APP_NAME" \
            --resource-group "advisoros-prod-primary-rg" \
            --slot "$PREVIOUS_SLOT" \
            --target-slot production
        else
          echo "No previous slot found - manual intervention required"
          exit 1
        fi

    - name: 'Verify Rollback Success'
      run: |
        PROD_URL="https://advisoros-prod-app.azurewebsites.net"

        echo "Verifying rollback success..."

        for i in {1..10}; do
          if curl -f -s "$PROD_URL/api/health" > /dev/null; then
            echo "✅ Rollback successful - production is healthy"
            break
          fi
          if [ $i -eq 10 ]; then
            echo "❌ Rollback failed - manual intervention required"
            exit 1
          fi
          sleep 10
        done

    - name: 'Emergency Alert'
      run: |
        echo "🚨 SENDING EMERGENCY ALERT 🚨"

        # Send immediate alert to all stakeholders
        # curl -X POST "${{ secrets.EMERGENCY_WEBHOOK_URL }}" \
        #   -H "Content-Type: application/json" \
        #   -d "{\"text\": \"🚨 PRODUCTION ROLLBACK EXECUTED - AdvisorOS - Immediate attention required\"}"