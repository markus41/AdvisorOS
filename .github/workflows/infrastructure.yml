name: Infrastructure Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy
        default: 'plan'
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
        default: 'dev'
      confirm_destroy:
        description: 'Type "DESTROY" to confirm destruction (required for destroy action)'
        required: false
        type: string

permissions:
  contents: read
  id-token: write
  issues: write

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.validation.outputs.proceed }}
    steps:
      - name: Validate Inputs
        id: validation
        run: |
          if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
              echo "‚ùå Destroy action requires confirmation. Please type 'DESTROY' in the confirm_destroy field."
              echo "proceed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
              echo "‚ùå Production environment cannot be destroyed via workflow. Manual intervention required."
              echo "proceed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          echo "proceed=true" >> $GITHUB_OUTPUT

  terraform:
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: needs.validate-inputs.outputs.proceed == 'true'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        working-directory: ./infrastructure/azure
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Validate
        working-directory: ./infrastructure/azure
        run: terraform validate

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
        working-directory: ./infrastructure/azure
        run: |
          terraform plan \
            -var="environment=${{ github.event.inputs.environment }}" \
            -var="app_name=cpa-platform-${{ github.event.inputs.environment }}" \
            -var="resource_group_name=cpa-platform-${{ github.event.inputs.environment }}-rg" \
            -var="admin_email=${{ secrets.ADMIN_EMAIL }}" \
            -var="db_admin_password=${{ secrets.DB_ADMIN_PASSWORD }}" \
            -var="nextauth_secret=${{ secrets.NEXTAUTH_SECRET }}" \
            -var="quickbooks_client_id=${{ secrets.QUICKBOOKS_CLIENT_ID }}" \
            -var="quickbooks_client_secret=${{ secrets.QUICKBOOKS_CLIENT_SECRET }}" \
            -var="stripe_api_key=${{ secrets.STRIPE_API_KEY }}" \
            -var="stripe_webhook_secret=${{ secrets.STRIPE_WEBHOOK_SECRET }}" \
            -out=tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        working-directory: ./infrastructure/azure
        run: terraform apply -auto-approve tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Destroy Plan
        if: github.event.inputs.action == 'destroy'
        working-directory: ./infrastructure/azure
        run: |
          terraform plan -destroy \
            -var="environment=${{ github.event.inputs.environment }}" \
            -var="app_name=cpa-platform-${{ github.event.inputs.environment }}" \
            -var="resource_group_name=cpa-platform-${{ github.event.inputs.environment }}-rg" \
            -var="admin_email=${{ secrets.ADMIN_EMAIL }}" \
            -var="db_admin_password=${{ secrets.DB_ADMIN_PASSWORD }}" \
            -var="nextauth_secret=${{ secrets.NEXTAUTH_SECRET }}" \
            -var="quickbooks_client_id=${{ secrets.QUICKBOOKS_CLIENT_ID }}" \
            -var="quickbooks_client_secret=${{ secrets.QUICKBOOKS_CLIENT_SECRET }}" \
            -var="stripe_api_key=${{ secrets.STRIPE_API_KEY }}" \
            -var="stripe_webhook_secret=${{ secrets.STRIPE_WEBHOOK_SECRET }}" \
            -out=destroy-plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: ./infrastructure/azure
        run: terraform apply -auto-approve destroy-plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Upload Terraform Plan
        if: github.event.inputs.action == 'plan'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ github.event.inputs.environment }}
          path: infrastructure/azure/tfplan
          retention-days: 30

      - name: Comment PR with Plan
        if: github.event.inputs.action == 'plan' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read terraform plan output
            const planPath = path.join('infrastructure/azure', 'terraform-plan.txt');
            let planOutput = 'Terraform plan completed successfully.';

            if (fs.existsSync(planPath)) {
              planOutput = fs.readFileSync(planPath, 'utf8');
            }

            const comment = `## Terraform Plan Results for ${{ github.event.inputs.environment }}

            <details>
            <summary>Click to expand plan output</summary>

            \`\`\`
            ${planOutput}
            \`\`\`

            </details>

            Plan generated at: ${new Date().toISOString()}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  notify:
    runs-on: ubuntu-latest
    needs: terraform
    if: always()
    steps:
      - name: Notify Status
        run: |
          ACTION="${{ github.event.inputs.action }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          STATUS="${{ needs.terraform.result }}"

          echo "üèóÔ∏è Infrastructure action: $ACTION"
          echo "üåç Environment: $ENVIRONMENT"

          if [ "$STATUS" == "success" ]; then
            echo "‚úÖ $ACTION completed successfully for $ENVIRONMENT"
          else
            echo "‚ùå $ACTION failed for $ENVIRONMENT"
            echo "Check the workflow logs for details."
          fi