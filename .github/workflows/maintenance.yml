name: Maintenance and Monitoring

on:
  schedule:
    # Run daily at 2 AM UTC for maintenance tasks
    - cron: '0 2 * * *'
    # Run weekly on Sundays at 3 AM UTC for comprehensive checks
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: true
        type: choice
        options:
          - health-check
          - backup-verification
          - security-scan
          - performance-analysis
          - cost-analysis
          - all
        default: 'health-check'
      environment:
        description: 'Environment to check'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
          - all
        default: 'all'

permissions:
  contents: read
  id-token: write
  security-events: write
  issues: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.env.outputs.environments }}
      is-scheduled: ${{ steps.schedule.outputs.is-scheduled }}
    steps:
      - name: Determine environments
        id: env
        run: |
          if [ "${{ github.event.inputs.environment }}" == "all" ] || [ "${{ github.event_name }}" == "schedule" ]; then
            echo "environments=[\"dev\",\"staging\",\"prod\"]" >> $GITHUB_OUTPUT
          else
            echo "environments=[\"${{ github.event.inputs.environment }}\"]" >> $GITHUB_OUTPUT
          fi

      - name: Check if scheduled
        id: schedule
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "is-scheduled=true" >> $GITHUB_OUTPUT
          else
            echo "is-scheduled=false" >> $GITHUB_OUTPUT
          fi

  health-check:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.task == 'health-check' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    strategy:
      matrix:
        environment: ${{ fromJson(needs.setup.outputs.environments) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Run Health Check Service
        id: health
        run: |
          echo "üè• Running standalone health checks for ${{ matrix.environment }}..."
          
          # Make script executable
          chmod +x ./scripts/maintenance/health-check.js
          
          # Run health check
          if node ./scripts/maintenance/health-check.js; then
            echo "health-status=healthy" >> $GITHUB_OUTPUT
            echo "‚úÖ Health check passed"
          else
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 1 ]; then
              echo "health-status=degraded" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è  Health check shows degraded status"
            else
              echo "health-status=unhealthy" >> $GITHUB_OUTPUT
              echo "‚ùå Health check failed"
            fi
          fi

      - name: Upload Health Check Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: health-check-results-${{ matrix.environment }}
          path: health-check-results.json

      - name: Create Issue on Failure
        if: steps.health.outputs.health-status == 'unhealthy'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Health Check Failed - ${{ matrix.environment }} Environment`;
            const body = `
            ## Health Check Failure Report

            **Environment:** ${{ matrix.environment }}
            **Date:** ${new Date().toISOString()}

            ### Status
            - **Health Status:** ${{ steps.health.outputs.health-status }}

            ### Action Required
            Please investigate and resolve the health check issues in the ${{ matrix.environment }} environment.
            Check the health-check-results.json artifact for detailed information.

            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            `;

            // Check if similar issue already exists
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'health-check,alert',
              state: 'open'
            });

            const existingIssue = issues.find(issue =>
              issue.title.includes('Health Check Failed') &&
              issue.title.includes('${{ matrix.environment }}')
            );

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['health-check', 'alert', 'bug', '${{ matrix.environment }}']
              });
            }

  backup-verification:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.task == 'backup-verification' || github.event.inputs.task == 'all' || needs.setup.outputs.is-scheduled == 'true'
    strategy:
      matrix:
        environment: ${{ fromJson(needs.setup.outputs.environments) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Run Backup Verification Service
        run: |
          echo "üóÑÔ∏è Running backup verification for ${{ matrix.environment }}..."
          
          # Make script executable
          chmod +x ./scripts/maintenance/backup-verification.js
          
          # Run backup verification
          node ./scripts/maintenance/backup-verification.js

      - name: Upload Backup Verification Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backup-verification-results-${{ matrix.environment }}
          path: backup-verification-results.json

  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.task == 'security-scan' || github.event.inputs.task == 'all' || needs.setup.outputs.is-scheduled == 'true'
    strategy:
      matrix:
        environment: ${{ fromJson(needs.setup.outputs.environments) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Run Security Scanning Service
        run: |
          echo "üîí Running security scan for ${{ matrix.environment }}..."
          
          # Make script executable
          chmod +x ./scripts/maintenance/security-scan.js
          
          # Run security scan
          node ./scripts/maintenance/security-scan.js

      - name: Upload Security Scan Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results-${{ matrix.environment }}
          path: security-scan-results.json

      - name: Upload Security Scan Results to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('security-scan-results.json') != ''
        continue-on-error: true
        with:
          sarif_file: security-scan-results.json

  performance-analysis:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.task == 'performance-analysis' || github.event.inputs.task == 'all' || needs.setup.outputs.is-scheduled == 'true'
    strategy:
      matrix:
        environment: ${{ fromJson(needs.setup.outputs.environments) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Run Performance Analysis Service
        run: |
          echo "üìä Running performance analysis for ${{ matrix.environment }}..."
          
          # Make script executable
          chmod +x ./scripts/maintenance/performance-analysis.js
          
          # Run performance analysis
          node ./scripts/maintenance/performance-analysis.js

      - name: Upload Performance Analysis Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-analysis-results-${{ matrix.environment }}
          path: performance-analysis-results.json

  cost-analysis:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.task == 'cost-analysis' || github.event.inputs.task == 'all' || needs.setup.outputs.is-scheduled == 'true'
    strategy:
      matrix:
        environment: ${{ fromJson(needs.setup.outputs.environments) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Run Cost Analysis Service
        run: |
          echo "üí∞ Running cost analysis for ${{ matrix.environment }}..."
          
          # Make script executable
          chmod +x ./scripts/maintenance/cost-analysis.js
          
          # Run cost analysis
          node ./scripts/maintenance/cost-analysis.js

      - name: Upload Cost Analysis Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cost-analysis-results-${{ matrix.environment }}
          path: cost-analysis-results.json

  summary:
    runs-on: ubuntu-latest
    needs: [setup, health-check, backup-verification, security-scan, performance-analysis, cost-analysis]
    if: always()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Run Master Maintenance Orchestrator
        run: |
          echo "üîß Running master maintenance orchestrator..."
          
          # Make script executable
          chmod +x ./scripts/maintenance/maintenance-orchestrator.js
          
          # Run orchestrator to generate summary (this will process existing results)
          node -e "
            const MaintenanceOrchestrator = require('./scripts/maintenance/maintenance-orchestrator');
            const orchestrator = new MaintenanceOrchestrator();
            
            // Load results from artifacts if they exist
            const fs = require('fs');
            const path = require('path');
            
            console.log('üìä Collecting maintenance results...');
            
            const serviceResults = [];
            const serviceNames = ['health-check', 'backup-verification', 'security-scan', 'performance-analysis', 'cost-analysis'];
            
            serviceNames.forEach(serviceName => {
              const resultFile = \`\${serviceName}-results.json\`;
              if (fs.existsSync(resultFile)) {
                try {
                  const results = JSON.parse(fs.readFileSync(resultFile, 'utf8'));
                  serviceResults.push({
                    name: serviceName,
                    status: results.status,
                    results: results,
                    priority: serviceName === 'health-check' || serviceName === 'security-scan' ? 1 : 2
                  });
                  console.log(\`‚úÖ Loaded \${serviceName} results\`);
                } catch (error) {
                  console.log(\`‚ö†Ô∏è  Could not load \${serviceName} results: \${error.message}\`);
                }
              } else {
                console.log(\`‚ùå \${resultFile} not found\`);
              }
            });
            
            if (serviceResults.length === 0) {
              console.log('‚ö†Ô∏è  No service results found, generating basic report');
              serviceResults.push({
                name: 'summary',
                status: 'degraded',
                results: { status: 'degraded', message: 'No detailed results available' },
                priority: 1
              });
            }
            
            // Generate summary manually
            orchestrator.results.services = {};
            serviceResults.forEach(result => {
              orchestrator.results.services[result.name] = result;
            });
            
            const totalServices = serviceResults.length;
            const healthyServices = serviceResults.filter(r => r.status === 'healthy').length;
            const degradedServices = serviceResults.filter(r => r.status === 'degraded').length;
            const unhealthyServices = serviceResults.filter(r => r.status === 'unhealthy' || r.status === 'failed').length;
            
            let overallStatus = 'healthy';
            if (unhealthyServices > 0) {
              overallStatus = unhealthyServices >= totalServices / 2 ? 'unhealthy' : 'degraded';
            } else if (degradedServices > 0) {
              overallStatus = 'degraded';
            }
            
            orchestrator.results.status = overallStatus;
            orchestrator.results.summary = {
              totalServices,
              healthyServices,
              degradedServices,
              unhealthyServices,
              overallStatus,
              totalTime: 0,
              timestamp: new Date().toISOString()
            };
            
            // Generate and save reports
            orchestrator.collectOverallMetrics(serviceResults);
            orchestrator.generateRecommendations(serviceResults);
            orchestrator.displaySummary();
            orchestrator.saveResults('./');
            
            console.log(\`üèÅ Maintenance summary completed with status: \${overallStatus.toUpperCase()}\`);
          "

      - name: Upload Complete Maintenance Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: complete-maintenance-report
          path: |
            maintenance-results.json
            maintenance-report.md

      - name: Generate GitHub Issue Report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const date = new Date().toISOString().split('T')[0];

            // Try to read the maintenance report
            let summary = `# üîß Maintenance Report - ${date}

            ## Summary
            This report contains the results of scheduled maintenance tasks.

            ## Task Results
            `;

            // Add results for each service
            const services = ['health-check', 'backup-verification', 'security-scan', 'performance-analysis', 'cost-analysis'];
            services.forEach(service => {
              const status = '${{ needs[service.replace(/-/g, '-')].result }}' || 'skipped';
              const icon = status === 'success' ? '‚úÖ' : status === 'failure' ? '‚ùå' : '‚ö†Ô∏è';
              const serviceName = service.split('-').map(word => 
                word.charAt(0).toUpperCase() + word.slice(1)
              ).join(' ');
              
              summary += `
            ### ${icon} ${serviceName}
            Status: ${status}
            `;
            });

            // Try to read comprehensive results if available
            try {
              if (fs.existsSync('maintenance-results.json')) {
                const results = JSON.parse(fs.readFileSync('maintenance-results.json', 'utf8'));
                
                if (results.criticalIssues && results.criticalIssues.length > 0) {
                  summary += `
            ## üö® Critical Issues
            `;
                  results.criticalIssues.forEach((issue, i) => {
                    summary += `${i + 1}. **[${issue.service}]** ${issue.issue}\n`;
                  });
                }

                if (results.recommendations && results.recommendations.length > 0) {
                  summary += `
            ## üí° Recommendations
            `;
                  results.recommendations.slice(0, 5).forEach((rec, i) => {
                    const priority = rec.priority === 1 ? 'üî¥' : rec.priority === 2 ? 'üü°' : 'üîµ';
                    summary += `${i + 1}. ${priority} **[${rec.service}]** ${rec.recommendation}\n`;
                  });
                }
              }
            } catch (error) {
              console.log('Could not read detailed results:', error.message);
            }

            summary += `
            ## Workflow Details
            - **Run ID:** ${{ github.run_id }}
            - **Triggered by:** ${{ github.event_name }}
            - **Environments:** ${${{ needs.setup.outputs.environments }}.join(', ')}

            For detailed results, check the individual job logs and artifacts in the workflow run.
            `;

            console.log(summary);

            // Create or update a maintenance issue for tracking
            const title = `üîß Maintenance Report - ${date}`;

            try {
              // Try to find existing maintenance issue for today
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'maintenance',
                state: 'open'
              });

              const todayIssue = issues.find(issue => issue.title.includes(date));

              if (todayIssue) {
                // Update existing issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: todayIssue.number,
                  body: summary
                });
                console.log('Updated existing maintenance issue');
              } else {
                // Create new issue
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: summary,
                  labels: ['maintenance', 'report']
                });
                console.log('Created new maintenance issue');
              }
            } catch (error) {
              console.log('Could not create/update maintenance issue:', error.message);
            }