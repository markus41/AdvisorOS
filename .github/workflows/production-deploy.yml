# Production CI/CD Pipeline for AdvisorOS
# Comprehensive deployment workflow with security scanning, testing, and monitoring

name: Production Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  AZURE_WEBAPP_NAME: '${{ vars.AZURE_WEBAPP_NAME }}'
  AZURE_WEBAPP_PACKAGE_PATH: './apps/web'

jobs:
  # Security and Vulnerability Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level high

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Snyk Security Check
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=medium

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # Code Quality and Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Type checking
        run: npx tsc --noEmit
        working-directory: ./apps/web

  # Comprehensive Testing Suite
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: advisoros_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:generate
          npm run db:push
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/advisoros_test

      - name: Run unit tests
        run: npm run test:unit
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/advisoros_test
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/advisoros_test
          REDIS_URL: redis://localhost:6379

      - name: Install Playwright dependencies
        run: npx playwright install --with-deps

      - name: Run end-to-end tests
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/advisoros_test
          REDIS_URL: redis://localhost:6379

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results/
            playwright-report/

  # Performance Testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run performance tests
        run: npm run test:performance

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results/

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test-suite]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/web/.next/
            apps/web/public/
            apps/web/package.json
            apps/web/package-lock.json
            apps/web/prisma/
          retention-days: 30

  # Infrastructure Validation
  infrastructure-validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '~1.5.0'

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure/terraform

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: ./infrastructure/terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./infrastructure/terraform

      - name: Terraform Plan
        run: terraform plan -var-file="environments/staging.tfvars" -out=tfplan
        working-directory: ./infrastructure/terraform

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: infrastructure/terraform/tfplan

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.webapp-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./apps/web/

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Infrastructure
        run: |
          terraform init
          terraform apply -var-file="environments/staging.tfvars" -auto-approve
        working-directory: ./infrastructure/terraform

      - name: Run Database Migrations
        run: |
          npm ci
          npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Deploy to Azure App Service
        id: deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'staging-advisoros-app'
          slot-name: 'production'
          package: './apps/web'

      - name: Run Smoke Tests
        run: |
          curl -f ${{ steps.deploy.outputs.webapp-url }}/api/health || exit 1
          curl -f ${{ steps.deploy.outputs.webapp-url }} || exit 1

      - name: Run Post-deployment Tests
        run: npm run test:e2e:staging
        env:
          BASE_URL: ${{ steps.deploy.outputs.webapp-url }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'production'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.webapp-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./apps/web/

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Infrastructure
        run: |
          terraform init
          terraform apply -var-file="environments/production.tfvars" -auto-approve
        working-directory: ./infrastructure/terraform

      - name: Create Database Backup
        run: |
          az postgres flexible-server backup create \
            --resource-group prod-advisoros-rg \
            --server-name prod-advisoros-postgres \
            --backup-name "pre-deployment-$(date +%Y%m%d-%H%M%S)"

      - name: Deploy to Staging Slot
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'prod-advisoros-app'
          slot-name: 'staging'
          package: './apps/web'

      - name: Run Database Migrations (Staging Slot)
        run: |
          npm ci
          npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Warm Up Staging Slot
        run: |
          curl -f https://prod-advisoros-app-staging.azurewebsites.net/api/health
          sleep 30
          curl -f https://prod-advisoros-app-staging.azurewebsites.net

      - name: Run Production Smoke Tests
        run: npm run test:e2e:production-staging
        env:
          BASE_URL: https://prod-advisoros-app-staging.azurewebsites.net

      - name: Swap to Production
        id: deploy
        run: |
          az webapp deployment slot swap \
            --resource-group prod-advisoros-rg \
            --name prod-advisoros-app \
            --slot staging \
            --target-slot production

      - name: Verify Production Deployment
        run: |
          sleep 60
          curl -f ${{ steps.deploy.outputs.webapp-url }}/api/health || exit 1
          curl -f ${{ steps.deploy.outputs.webapp-url }} || exit 1

      - name: Run Post-deployment Health Checks
        run: npm run test:health:production
        env:
          BASE_URL: ${{ steps.deploy.outputs.webapp-url }}

  # Rollback on Failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-production.result == 'failure')
    needs: [deploy-production]
    environment:
      name: production

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Rollback Deployment
        run: |
          az webapp deployment slot swap \
            --resource-group prod-advisoros-rg \
            --name prod-advisoros-app \
            --slot production \
            --target-slot staging

      - name: Notify Team of Rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Production deployment failed and was rolled back. Please investigate.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup and Notifications
  cleanup:
    name: Cleanup and Notify
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-staging, deploy-production]
    steps:
      - name: Clean up old artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cleanup-log
          path: /dev/null
          retention-days: 1

      - name: Notify Deployment Status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            AdvisorOS Deployment Status: ${{ job.status }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}