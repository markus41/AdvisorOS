// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id               String  @id @default(cuid())
  name             String
  subdomain        String  @unique
  subscriptionTier String  @default("trial")
  stripeCustomerId String?

  // Marketplace Configuration
  isMarketplaceEnabled Boolean @default(false) // Can participate in marketplace
  marketplaceType      String? // "advisor_agency", "white_label_partner", "standard", null
  commissionRate       Float? // Custom commission rate if negotiated
  parentOrganizationId String? // For white-label partnerships

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  users                   User[]
  clients                 Client[]
  documents               Document[]
  quickbooksToken         QuickBooksToken?
  quickbooksSyncs         QuickBooksSync[]
  quickbooksWebhookEvents QuickBooksWebhookEvent[]
  engagements             Engagement[]
  workflows               Workflow[]
  tasks                   Task[]
  invoices                Invoice[]
  reports                 Report[]
  reportTemplates         ReportTemplate[]
  reportSchedules         ReportSchedule[]
  auditLogs               AuditLog[]
  authAttempts            AuthAttempt[]
  authEvents              AuthEvent[]
  teamMembers             TeamMember[]
  subscription            Subscription?
  workflowTemplates       WorkflowTemplate[]
  workflowExecutions      WorkflowExecution[]
  taskExecutions          TaskExecution[]
  taskQueueItems          TaskQueueItem[]
  jobExecutions           JobExecution[]
  documentProcessing      DocumentProcessing[]
  documentEmbeddings      DocumentEmbedding[]
  documentSessions        DocumentSession[]
  apiUsageMetrics         ApiUsageMetric[]
  webhookDeliveries       WebhookDelivery[]
  jobPostings             JobPosting[]
  candidates              Candidate[]
  applications            Application[]
  applicationStages       ApplicationStage[]
  interviews              Interview[]
  candidateCommunications CandidateCommunication[]
  candidateActivities     CandidateActivity[]
  applicationActivities   ApplicationActivity[]

  @@index([isMarketplaceEnabled])
  @@index([marketplaceType])
  @@map("organizations")
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  name           String
  password       String // Hashed password
  role           String // "owner", "admin", "cpa", "staff", "fractional_cfo", "fractional_controller", "senior_advisor", "staff_accountant", "financial_analyst", "client_owner", "client_finance", "client_executive", "independent_advisor", "quality_reviewer", "client_success_manager", "compliance_officer"
  advisorType    String? // For advisor roles: "fractional_cfo", "controller", "senior_advisor", "analyst", "bookkeeper"
  isAdvisor      Boolean      @default(false) // Quick flag for advisor roles
  isClientUser   Boolean      @default(false) // Quick flag for client portal users
  isActive       Boolean      @default(true)
  lastLoginAt    DateTime?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      String?
  updatedBy      String?

  // Relations
  uploadedDocuments           Document[]                 @relation("DocumentUploader")
  assignedTasks               Task[]                     @relation("TaskAssignee")
  createdTasks                Task[]                     @relation("TaskCreator")
  createdEngagements          Engagement[]               @relation("EngagementCreator")
  assignedEngagements         Engagement[]               @relation("EngagementAssignee")
  createdInvoices             Invoice[]                  @relation("InvoiceCreator")
  createdReports              Report[]                   @relation("ReportCreator")
  createdTemplates            ReportTemplate[]           @relation("TemplateCreator")
  createdSchedules            ReportSchedule[]           @relation("ScheduleCreator")
  createdAuditLogs            AuditLog[]                 @relation("AuditLogCreator")
  notes                       Note[]
  authAttempts                AuthAttempt[]
  authEvents                  AuthEvent[]
  teamMember                  TeamMember?
  documentAnnotations         DocumentAnnotation[]
  documentComments            DocumentComment[]
  documentShares              DocumentShare[]
  assignedWorkflowExecutions  WorkflowExecution[]        @relation("WorkflowExecutionAssignee")
  createdWorkflowExecutions   WorkflowExecution[]        @relation("WorkflowExecutionCreator")
  assignedTaskExecutions      TaskExecution[]            @relation("TaskExecutionAssignee")
  advisorProfile              AdvisorProfile?
  clientPortalAccess          ClientPortalAccess[]
  givenSatisfactionRatings    ClientSatisfactionMetric[] @relation("RatingCreator")
  receivedSatisfactionRatings ClientSatisfactionMetric[] @relation("RatingAdvisor")
  advisorCommissions          RevenueShare[]
  documentSessions            DocumentSession[]
  apiUsageMetrics             ApiUsageMetric[]
  managedJobs                 JobPosting[]               @relation("JobHiringManager")
  recruitedJobs               JobPosting[]               @relation("JobRecruiter")
  createdJobs                 JobPosting[]               @relation("JobPostingCreator")
  assignedApplications        Application[]              @relation("ApplicationAssignee")
  organizedInterviews         Interview[]                @relation("InterviewOrganizer")
  candidateActivities         CandidateActivity[]        @relation("ActivityPerformer")
  applicationActivities       ApplicationActivity[]      @relation("ApplicationActivityPerformer")

  @@index([organizationId])
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([lastLoginAt])
  @@index([isAdvisor])
  @@index([isClientUser])
  @@index([advisorType])
  @@map("users")
}

model Client {
  id                  String       @id @default(cuid())
  businessName        String
  legalName           String?
  taxId               String?
  quickbooksId        String?
  organizationId      String
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  primaryContactEmail String
  primaryContactName  String
  primaryContactPhone String?
  businessAddress     String?
  mailingAddress      String?
  businessType        String? // "LLC", "Corporation", "Partnership", "Sole Proprietorship"
  industry            String?
  website             String?
  status              String       @default("active") // "active", "inactive", "prospect"
  riskLevel           String       @default("medium") // "low", "medium", "high"
  annualRevenue       Decimal?
  financialData       Json? // Store QuickBooks sync data
  customFields        Json? // Additional client-specific data
  deletedAt           DateTime?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  createdBy           String?
  updatedBy           String?

  // Relations
  documents           Document[]
  notes               Note[]
  engagements         Engagement[]
  invoices            Invoice[]
  workflowExecutions  WorkflowExecution[]
  clientPortalAccess  ClientPortalAccess[]
  satisfactionMetrics ClientSatisfactionMetric[]
  marketplaceMatches  AdvisorMarketplaceMatch[]
  revenueShares       RevenueShare[]

  @@index([organizationId])
  @@index([status])
  @@index([businessName])
  @@index([businessType])
  @@index([industry])
  @@index([riskLevel])
  @@index([primaryContactEmail])
  @@map("clients")
}

model Document {
  id               String       @id @default(cuid())
  fileName         String
  fileUrl          String
  thumbnailUrl     String?
  fileType         String
  mimeType         String?
  fileSize         BigInt?
  category         String // "tax_return", "financial_statement", "receipt", "invoice", "bank_statement", "w2", "1099", etc.
  subcategory      String?
  year             Int?
  quarter          Int?
  version          Int          @default(1)
  isLatestVersion  Boolean      @default(true)
  parentDocumentId String?
  parentDocument   Document?    @relation("DocumentVersions", fields: [parentDocumentId], references: [id])
  documentVersions Document[]   @relation("DocumentVersions")
  tags             String[] // Array of tags for categorization
  description      String?
  clientId         String
  client           Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploadedBy       String
  uploader         User         @relation("DocumentUploader", fields: [uploadedBy], references: [id])

  // OCR and Processing
  ocrStatus      String    @default("pending") // "pending", "processing", "completed", "failed", "manual_review"
  ocrConfidence  Float? // Overall confidence score 0-1
  ocrProcessedAt DateTime?
  extractedData  Json? // Structured OCR results
  rawOcrData     Json? // Raw OCR output
  ocrModel       String? // Model used for OCR
  needsReview    Boolean   @default(false)
  reviewedAt     DateTime?
  reviewedBy     String?

  // Security and Compliance
  metadata        Json? // Additional metadata
  checksum        String? // File integrity verification
  isConfidential  Boolean   @default(false)
  accessLevel     String    @default("organization") // "public", "organization", "client", "restricted"
  encryptionKey   String? // For encrypted documents
  virusScanned    Boolean   @default(false)
  virusScanDate   DateTime?
  virusScanResult String? // "clean", "infected", "quarantined"

  // Retention and Lifecycle
  retentionDate DateTime? // When document should be deleted
  archiveDate   DateTime? // When to archive
  isArchived    Boolean   @default(false)

  // Timestamps
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?

  // Relations
  annotations DocumentAnnotation[]
  comments    DocumentComment[]
  shares      DocumentShare[]
  processing  DocumentProcessing?
  embeddings  DocumentEmbedding[]
  sessions    DocumentSession[]

  @@index([organizationId])
  @@index([clientId])
  @@index([category])
  @@index([subcategory])
  @@index([year])
  @@index([quarter])
  @@index([isLatestVersion])
  @@index([uploadedBy])
  @@index([fileType])
  @@index([isConfidential])
  @@index([ocrStatus])
  @@index([needsReview])
  @@index([createdAt])
  @@index([tags])
  @@map("documents")
}

model QuickBooksToken {
  id             String       @id @default(cuid())
  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  accessToken    String       @db.Text
  refreshToken   String       @db.Text
  realmId        String
  expiresAt      DateTime
  lastSyncAt     DateTime?
  isActive       Boolean      @default(true)
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      String?
  updatedBy      String?

  @@map("quickbooks_tokens")
}

model Note {
  id           String      @id @default(cuid())
  title        String?
  content      String      @db.Text
  noteType     String      @default("general") // "general", "meeting", "reminder", "follow_up"
  priority     String      @default("normal") // "low", "normal", "high", "urgent"
  isPrivate    Boolean     @default(false)
  tags         String[] // Array of tags
  clientId     String?
  client       Client?     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  engagementId String?
  engagement   Engagement? @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  taskId       String?
  task         Task?       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId     String
  author       User        @relation(fields: [authorId], references: [id])
  reminderDate DateTime?
  deletedAt    DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    String?
  updatedBy    String?

  @@index([clientId])
  @@index([engagementId])
  @@index([taskId])
  @@index([authorId])
  @@map("notes")
}

model Engagement {
  id             String              @id @default(cuid())
  name           String
  description    String?             @db.Text
  type           String // "tax_preparation", "bookkeeping", "advisory", "cfo_services", "audit", "review"
  status         String              @default("planning") // "planning", "in_progress", "review", "completed", "on_hold", "cancelled"
  priority       String              @default("normal") // "low", "normal", "high", "urgent"
  startDate      DateTime?
  dueDate        DateTime?
  completedDate  DateTime?
  estimatedHours Decimal?
  actualHours    Decimal?
  hourlyRate     Decimal?
  fixedFee       Decimal?
  clientId       String
  client         Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedToId   String?
  assignedTo     User?               @relation("EngagementAssignee", fields: [assignedToId], references: [id])
  createdById    String
  createdBy      User                @relation("EngagementCreator", fields: [createdById], references: [id])
  workflowId     String?
  workflow       Workflow?           @relation(fields: [workflowId], references: [id])
  rateCardId     String?
  rateCard       EngagementRateCard? @relation("EngagementRateCard", fields: [rateCardId], references: [id])
  year           Int?
  quarter        Int?
  customFields   Json? // Additional engagement-specific data
  deletedAt      DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  updatedBy      String?

  // Relations
  tasks               Task[]
  notes               Note[]
  invoices            Invoice[]
  reports             Report[]
  workflowExecutions  WorkflowExecution[]
  satisfactionMetrics ClientSatisfactionMetric[]
  revenueShares       RevenueShare[]

  @@index([organizationId])
  @@index([clientId])
  @@index([assignedToId])
  @@index([status])
  @@index([type])
  @@index([dueDate])
  @@index([rateCardId])
  @@map("engagements")
}

model Workflow {
  id             String       @id @default(cuid())
  name           String
  description    String?      @db.Text
  type           String // "tax_preparation", "bookkeeping", "onboarding", "year_end", "custom"
  isTemplate     Boolean      @default(true)
  isActive       Boolean      @default(true)
  version        Int          @default(1)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  steps          Json // Workflow steps configuration
  settings       Json? // Workflow settings and rules
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      String?
  updatedBy      String?

  // Relations
  engagements        Engagement[]
  tasks              Task[]
  workflowExecutions WorkflowExecution[]

  @@index([organizationId])
  @@index([type])
  @@index([isActive])
  @@map("workflows")
}

model Task {
  id             String       @id @default(cuid())
  title          String
  description    String?      @db.Text
  status         String       @default("pending") // "pending", "in_progress", "review", "completed", "cancelled"
  priority       String       @default("normal") // "low", "normal", "high", "urgent"
  taskType       String // "document_review", "data_entry", "client_meeting", "preparation", "review", "custom"
  estimatedHours Decimal?
  actualHours    Decimal?
  startDate      DateTime?
  dueDate        DateTime?
  completedDate  DateTime?
  assignedToId   String?
  assignedTo     User?        @relation("TaskAssignee", fields: [assignedToId], references: [id])
  createdById    String
  createdBy      User         @relation("TaskCreator", fields: [createdById], references: [id])
  engagementId   String?
  engagement     Engagement?  @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  workflowId     String?
  workflow       Workflow?    @relation(fields: [workflowId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parentTaskId   String?
  parentTask     Task?        @relation("TaskDependencies", fields: [parentTaskId], references: [id])
  subTasks       Task[]       @relation("TaskDependencies")
  dependencies   Json? // Task dependency rules
  checklist      Json? // Task checklist items
  attachments    Json? // File attachments metadata
  customFields   Json? // Additional task-specific data
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  updatedBy      String?

  // Relations
  notes Note[]

  @@index([organizationId])
  @@index([assignedToId])
  @@index([engagementId])
  @@index([workflowId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@map("tasks")
}

model Invoice {
  id             String         @id @default(cuid())
  invoiceNumber  String         @unique
  title          String?
  description    String?        @db.Text
  status         String         @default("draft") // "draft", "sent", "viewed", "partial", "paid", "overdue", "cancelled"
  invoiceDate    DateTime       @default(now())
  dueDate        DateTime
  subtotal       Decimal        @db.Decimal(10, 2)
  taxAmount      Decimal        @default(0) @db.Decimal(10, 2)
  discountAmount Decimal        @default(0) @db.Decimal(10, 2)
  totalAmount    Decimal        @db.Decimal(10, 2)
  paidAmount     Decimal        @default(0) @db.Decimal(10, 2)
  balanceAmount  Decimal        @db.Decimal(10, 2)
  currency       String         @default("USD")
  paymentTerms   String? // "net_30", "net_15", "due_on_receipt", etc.
  clientId       String
  client         Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  engagementId   String?
  engagement     Engagement?    @relation(fields: [engagementId], references: [id])
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdById    String
  createdBy      User           @relation("InvoiceCreator", fields: [createdById], references: [id])
  lineItems      Json // Invoice line items
  paymentHistory Json? // Payment transaction history
  emailHistory   Json? // Email send history
  notes          String?        @db.Text
  customFields   Json? // Additional invoice-specific data
  sentAt         DateTime?
  viewedAt       DateTime?
  paidAt         DateTime?
  deletedAt      DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  updatedBy      String?
  RevenueShare   RevenueShare[]

  @@index([organizationId])
  @@index([clientId])
  @@index([engagementId])
  @@index([status])
  @@index([dueDate])
  @@index([invoiceNumber])
  @@map("invoices")
}

model Report {
  id             String          @id @default(cuid())
  name           String
  description    String?         @db.Text
  reportType     String // "financial_statement", "tax_summary", "engagement_summary", "time_tracking", "custom"
  format         String // "pdf", "excel", "csv", "html", "pptx"
  status         String          @default("generating") // "generating", "completed", "failed", "archived"
  fileUrl        String?
  fileSize       BigInt?
  parameters     Json? // Report generation parameters
  data           Json? // Report data/results
  metadata       Json? // Additional report metadata
  templateId     String?
  template       ReportTemplate? @relation(fields: [templateId], references: [id])
  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  engagementId   String?
  engagement     Engagement?     @relation(fields: [engagementId], references: [id])
  clientIds      String[] // Multiple clients support
  createdById    String
  createdBy      User            @relation("ReportCreator", fields: [createdById], references: [id])
  generatedAt    DateTime?
  expiresAt      DateTime?
  downloadCount  Int             @default(0)
  isScheduled    Boolean         @default(false)
  scheduleConfig Json? // Cron configuration for scheduled reports
  deletedAt      DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  updatedBy      String?

  @@index([organizationId])
  @@index([engagementId])
  @@index([templateId])
  @@index([reportType])
  @@index([status])
  @@index([createdById])
  @@index([isScheduled])
  @@map("reports")
}

model ReportTemplate {
  id               String        @id @default(cuid())
  name             String
  description      String?       @db.Text
  category         String // "monthly_financial", "tax_preparation", "advisory", "custom"
  type             String // "financial_package", "tax_organizer", "business_scorecard", etc.
  version          String        @default("1.0.0")
  isActive         Boolean       @default(true)
  isSystem         Boolean       @default(false) // System templates vs custom templates
  layout           Json // Template layout configuration
  sections         Json // Report sections and their configuration
  dataRequirements Json // Required data sources and fields
  chartConfigs     Json? // Chart configurations
  brandingOptions  Json? // Branding customization options
  organizationId   String?
  organization     Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdById      String?
  createdBy        User?         @relation("TemplateCreator", fields: [createdById], references: [id])
  deletedAt        DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  reports   Report[]
  schedules ReportSchedule[]

  @@index([organizationId])
  @@index([category])
  @@index([type])
  @@index([isActive])
  @@index([isSystem])
  @@map("report_templates")
}

model ReportSchedule {
  id             String          @id @default(cuid())
  name           String
  description    String?         @db.Text
  isActive       Boolean         @default(true)
  cronExpression String // Cron expression for scheduling
  reportType     String
  templateId     String?
  template       ReportTemplate? @relation(fields: [templateId], references: [id])
  format         String          @default("pdf")
  parameters     Json // Report parameters
  recipients     Json // Email recipients configuration
  clientIds      String[] // Target clients
  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdById    String
  createdBy      User            @relation("ScheduleCreator", fields: [createdById], references: [id])
  lastRunAt      DateTime?
  nextRunAt      DateTime?
  errorCount     Int             @default(0)
  lastError      String?         @db.Text
  deletedAt      DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([organizationId])
  @@index([isActive])
  @@index([nextRunAt])
  @@index([templateId])
  @@map("report_schedules")
}

model AuditLog {
  id             String       @id @default(cuid())
  action         String // "create", "update", "delete", "login", "logout", "export", "import", etc.
  entityType     String // "user", "client", "document", "engagement", "invoice", etc.
  entityId       String?
  oldValues      Json? // Previous state for updates
  newValues      Json? // New state for updates
  metadata       Json? // Additional context data
  ipAddress      String?
  userAgent      String?      @db.Text
  sessionId      String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?        @relation("AuditLogCreator", fields: [userId], references: [id])
  createdAt      DateTime     @default(now())

  @@index([organizationId])
  @@index([userId])
  @@index([entityType])
  @@index([entityId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model AuthAttempt {
  id             String        @id @default(cuid())
  email          String
  success        Boolean
  failureReason  String?
  ipAddress      String?
  userAgent      String?       @db.Text
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?         @relation(fields: [userId], references: [id])
  sessionId      String?
  metadata       Json? // Additional auth attempt data
  createdAt      DateTime      @default(now())

  @@index([email])
  @@index([success])
  @@index([ipAddress])
  @@index([createdAt])
  @@index([organizationId])
  @@map("auth_attempts")
}

model AuthEvent {
  id             String        @id @default(cuid())
  eventType      String // "login", "logout", "password_change", "mfa_enabled", "account_locked", etc.
  success        Boolean
  description    String?       @db.Text
  ipAddress      String?
  userAgent      String?       @db.Text
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?         @relation(fields: [userId], references: [id])
  sessionId      String?
  metadata       Json? // Additional event data
  createdAt      DateTime      @default(now())

  @@index([eventType])
  @@index([userId])
  @@index([success])
  @@index([createdAt])
  @@index([organizationId])
  @@map("auth_events")
}

model TeamMember {
  id              String                 @id @default(cuid())
  userId          String                 @unique
  user            User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId  String
  organization    Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role            String // "owner", "admin", "manager", "senior_cpa", "cpa", "staff", "intern"
  department      String? // "tax", "audit", "advisory", "bookkeeping", "admin"
  title           String? // Job title
  specializations String[] // Areas of expertise
  hourlyRate      Decimal?               @db.Decimal(8, 2)
  isActive        Boolean                @default(true)
  hireDate        DateTime?
  terminationDate DateTime?
  permissions     TeamMemberPermission[]
  deletedAt       DateTime?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  createdBy       String?
  updatedBy       String?

  @@index([organizationId])
  @@index([userId])
  @@index([role])
  @@index([isActive])
  @@map("team_members")
}

model Permission {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?  @db.Text
  category      String // "user_management", "client_management", "document_management", "billing", "reporting", etc.
  action        String // "create", "read", "update", "delete", "export", "import", etc.
  resource      String // "users", "clients", "documents", "invoices", "reports", etc.
  isSystemLevel Boolean  @default(false) // System-level permissions vs organization-level
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  teamMemberPermissions TeamMemberPermission[]

  @@index([category])
  @@index([resource])
  @@index([action])
  @@map("permissions")
}

model TeamMemberPermission {
  id           String     @id @default(cuid())
  teamMemberId String
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  granted      Boolean    @default(true)
  grantedBy    String?
  grantedAt    DateTime   @default(now())
  revokedBy    String?
  revokedAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([teamMemberId, permissionId])
  @@index([teamMemberId])
  @@index([permissionId])
  @@map("team_member_permissions")
}

model Subscription {
  id                   String       @id @default(cuid())
  organizationId       String       @unique
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  planName             String // "trial", "starter", "professional", "enterprise"
  planType             String // "monthly", "yearly"
  status               String // "active", "past_due", "canceled", "incomplete", "trialing"
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean      @default(false)
  canceledAt           DateTime?
  trialStart           DateTime?
  trialEnd             DateTime?
  stripeSubscriptionId String?      @unique
  stripePriceId        String?
  stripeCustomerId     String?
  quantity             Int          @default(1)
  unitAmount           Decimal?     @db.Decimal(10, 2)
  currency             String       @default("USD")
  features             Json? // Available features for this subscription
  limits               Json? // Usage limits (users, clients, storage, etc.)
  usage                Json? // Current usage stats
  metadata             Json? // Additional subscription data
  deletedAt            DateTime?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  createdBy            String?
  updatedBy            String?

  @@index([organizationId])
  @@index([status])
  @@index([planName])
  @@index([currentPeriodEnd])
  @@map("subscriptions")
}

model QuickBooksSync {
  id               String       @id @default(cuid())
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  syncType         String // "full", "incremental", "manual", "webhook"
  entityType       String // "company", "accounts", "customers", "invoices", "reports", "transactions"
  status           String // "pending", "in_progress", "completed", "failed", "cancelled"
  startedAt        DateTime     @default(now())
  completedAt      DateTime?
  recordsTotal     Int?
  recordsProcessed Int          @default(0)
  recordsSuccess   Int          @default(0)
  recordsFailed    Int          @default(0)
  errorMessage     String?      @db.Text
  errorDetails     Json?
  metadata         Json? // Additional sync context
  lastSyncCursor   String? // For incremental syncs
  triggeredBy      String? // User ID or "system"
  deletedAt        DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([organizationId])
  @@index([syncType])
  @@index([entityType])
  @@index([status])
  @@index([startedAt])
  @@map("quickbooks_syncs")
}

model QuickBooksWebhookEvent {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  eventId        String       @unique // QuickBooks webhook event ID
  eventType      String // "CREATE", "UPDATE", "DELETE", "VOID"
  entityName     String // "Customer", "Invoice", "Item", etc.
  entityId       String // QuickBooks entity ID
  realmId        String
  eventTime      DateTime // When the event occurred in QuickBooks
  status         String       @default("pending") // "pending", "processed", "failed", "ignored"
  processedAt    DateTime?
  errorMessage   String?      @db.Text
  retryCount     Int          @default(0)
  maxRetries     Int          @default(3)
  nextRetryAt    DateTime?
  payload        Json // Full webhook payload
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([eventType])
  @@index([entityName])
  @@index([status])
  @@index([eventTime])
  @@index([nextRetryAt])
  @@map("quickbooks_webhook_events")
}

model DocumentAnnotation {
  id          String               @id @default(cuid())
  documentId  String
  document    Document             @relation(fields: [documentId], references: [id], onDelete: Cascade)
  type        String // "highlight", "note", "rectangle", "arrow", "text"
  page        Int                  @default(1) // For multi-page documents
  coordinates Json // Position data {x, y, width, height}
  content     String?              @db.Text // Annotation text content
  color       String               @default("#ffff00") // Hex color code
  style       Json? // Additional styling properties
  isPrivate   Boolean              @default(false)
  createdBy   String
  creator     User                 @relation(fields: [createdBy], references: [id])
  replies     DocumentAnnotation[] @relation("AnnotationReplies")
  parentId    String?
  parent      DocumentAnnotation?  @relation("AnnotationReplies", fields: [parentId], references: [id])
  deletedAt   DateTime?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@index([documentId])
  @@index([createdBy])
  @@index([page])
  @@index([type])
  @@map("document_annotations")
}

model DocumentComment {
  id           String            @id @default(cuid())
  documentId   String
  document     Document          @relation(fields: [documentId], references: [id], onDelete: Cascade)
  content      String            @db.Text
  isPrivate    Boolean           @default(false)
  mentions     String[] // User IDs mentioned in comment
  attachments  Json? // File attachments
  taskAssigned String? // If comment creates a task
  status       String            @default("open") // "open", "resolved", "archived"
  createdBy    String
  creator      User              @relation(fields: [createdBy], references: [id])
  replies      DocumentComment[] @relation("CommentReplies")
  parentId     String?
  parent       DocumentComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  deletedAt    DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([documentId])
  @@index([createdBy])
  @@index([status])
  @@map("document_comments")
}

model DocumentShare {
  id                String    @id @default(cuid())
  documentId        String
  document          Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  shareType         String // "link", "email", "user", "client"
  sharedWith        String? // Email or user ID
  accessLevel       String // "view", "comment", "edit"
  expiresAt         DateTime?
  downloadAllowed   Boolean   @default(false)
  passwordProtected Boolean   @default(false)
  password          String? // Hashed password for link shares
  viewCount         Int       @default(0)
  lastViewedAt      DateTime?
  isActive          Boolean   @default(true)
  createdBy         String
  creator           User      @relation(fields: [createdBy], references: [id])
  deletedAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([documentId])
  @@index([createdBy])
  @@index([shareType])
  @@index([expiresAt])
  @@map("document_shares")
}

model WorkflowTemplate {
  id                String        @id @default(cuid())
  name              String
  description       String?       @db.Text
  category          String // "tax_preparation", "bookkeeping", "onboarding", "year_end", "compliance"
  type              String // "monthly_bookkeeping", "tax_return_1040", "new_client_onboarding", etc.
  version           String        @default("1.0.0")
  isSystemTemplate  Boolean       @default(false) // Built-in templates vs custom
  isActive          Boolean       @default(true)
  estimatedDuration Int? // Estimated completion time in hours
  complexity        String        @default("medium") // "low", "medium", "high"
  steps             Json // Template steps configuration
  taskTemplates     Json // Task templates within workflow
  requirements      Json? // Prerequisites and requirements
  settings          Json? // Default workflow settings
  metadata          Json? // Additional template metadata
  organizationId    String?
  organization      Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy         String?
  deletedAt         DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  executions WorkflowExecution[]

  @@index([organizationId])
  @@index([category])
  @@index([type])
  @@index([isSystemTemplate])
  @@index([isActive])
  @@map("workflow_templates")
}

model WorkflowExecution {
  id               String            @id @default(cuid())
  name             String
  description      String?           @db.Text
  status           String            @default("pending") // "pending", "running", "paused", "completed", "failed", "cancelled"
  priority         String            @default("normal") // "low", "normal", "high", "urgent"
  progress         Float             @default(0) // Completion percentage 0-100
  templateId       String?
  template         WorkflowTemplate? @relation(fields: [templateId], references: [id])
  workflowId       String?
  workflow         Workflow?         @relation(fields: [workflowId], references: [id])
  engagementId     String?
  engagement       Engagement?       @relation(fields: [engagementId], references: [id])
  clientId         String?
  client           Client?           @relation(fields: [clientId], references: [id])
  organizationId   String
  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedToId     String?
  assignedTo       User?             @relation("WorkflowExecutionAssignee", fields: [assignedToId], references: [id])
  startedAt        DateTime?
  scheduledFor     DateTime?
  dueDate          DateTime?
  completedAt      DateTime?
  cancelledAt      DateTime?
  pausedAt         DateTime?
  resumedAt        DateTime?
  currentStepIndex Int               @default(0)
  configuration    Json? // Execution-specific configuration
  context          Json? // Execution context and variables
  errorMessage     String?           @db.Text
  errorDetails     Json? // Detailed error information
  retryCount       Int               @default(0)
  maxRetries       Int               @default(3)
  isRecurring      Boolean           @default(false)
  cronExpression   String? // For recurring workflows
  nextRunAt        DateTime?
  lastRunAt        DateTime?
  createdBy        String
  createdById      User              @relation("WorkflowExecutionCreator", fields: [createdBy], references: [id])
  deletedAt        DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relations
  taskExecutions TaskExecution[]
  queueItems     TaskQueueItem[]

  @@index([organizationId])
  @@index([templateId])
  @@index([workflowId])
  @@index([engagementId])
  @@index([clientId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([scheduledFor])
  @@index([dueDate])
  @@index([nextRunAt])
  @@index([isRecurring])
  @@map("workflow_executions")
}

model TaskExecution {
  id                  String            @id @default(cuid())
  title               String
  description         String?           @db.Text
  status              String            @default("pending") // "pending", "ready", "running", "completed", "failed", "skipped", "cancelled"
  priority            String            @default("normal") // "low", "normal", "high", "urgent"
  taskType            String // "document_review", "data_entry", "client_meeting", "preparation", "review", "approval"
  stepIndex           Int // Order in workflow
  estimatedHours      Decimal?
  actualHours         Decimal?
  startedAt           DateTime?
  dueDate             DateTime?
  completedAt         DateTime?
  assignedToId        String?
  assignedTo          User?             @relation("TaskExecutionAssignee", fields: [assignedToId], references: [id])
  workflowExecutionId String
  workflowExecution   WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  parentTaskId        String?
  parentTask          TaskExecution?    @relation("TaskExecutionDependencies", fields: [parentTaskId], references: [id])
  dependentTasks      TaskExecution[]   @relation("TaskExecutionDependencies")
  dependencies        Json? // Task dependency configuration
  blockers            Json? // Current blockers preventing execution
  inputs              Json? // Input data for task
  outputs             Json? // Output data from task
  checklist           Json? // Task checklist items
  configuration       Json? // Task-specific configuration
  errorMessage        String?           @db.Text
  errorDetails        Json? // Detailed error information
  retryCount          Int               @default(0)
  maxRetries          Int               @default(3)
  organizationId      String
  organization        Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy           String
  deletedAt           DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([organizationId])
  @@index([workflowExecutionId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([stepIndex])
  @@index([dueDate])
  @@map("task_executions")
}

model TaskQueueItem {
  id                  String             @id @default(cuid())
  queueName           String // "high_priority", "normal", "background", "scheduled"
  itemType            String // "workflow_execution", "task_execution", "report_generation", "email_notification"
  entityId            String // ID of the entity being processed
  entityType          String // Type of entity (workflow_execution, task_execution, etc.)
  status              String             @default("pending") // "pending", "processing", "completed", "failed", "cancelled"
  priority            Int                @default(0) // Higher number = higher priority
  attempts            Int                @default(0)
  maxAttempts         Int                @default(3)
  scheduledFor        DateTime? // When to process this item
  startedAt           DateTime?
  completedAt         DateTime?
  failedAt            DateTime?
  nextRetryAt         DateTime?
  payload             Json? // Additional data needed for processing
  result              Json? // Processing result
  errorMessage        String?            @db.Text
  errorDetails        Json? // Detailed error information
  processingLockId    String? // Prevents concurrent processing
  lockAcquiredAt      DateTime?
  lockExpiresAt       DateTime?
  workflowExecutionId String?
  workflowExecution   WorkflowExecution? @relation(fields: [workflowExecutionId], references: [id])
  organizationId      String
  organization        Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy           String?
  deletedAt           DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  @@index([organizationId])
  @@index([queueName])
  @@index([status])
  @@index([priority])
  @@index([scheduledFor])
  @@index([nextRetryAt])
  @@index([entityId, entityType])
  @@index([processingLockId])
  @@index([lockExpiresAt])
  @@map("task_queue_items")
}

// ============================================================================
// FRACTIONAL CFO MARKETPLACE MODELS
// ============================================================================

model AdvisorProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Professional Information
  professionalTitle String? // "Fractional CFO", "Senior Financial Advisor", etc.
  yearsExperience   Int?
  certifications    String[] // ["CPA", "CFA", "MBA", "CFE"]
  licenseNumber     String?
  licenseState      String?

  // Expertise & Specializations
  industries      String[] // ["SaaS", "Healthcare", "Manufacturing", "E-commerce"]
  services        String[] // ["Financial Planning", "Cash Flow Management", "M&A", "Fundraising"]
  businessSizes   String[] // ["startup", "smb", "mid_market", "enterprise"]
  specializations Json? // Detailed specialization data

  // Marketplace Status
  isAvailable       Boolean   @default(true)
  isVerified        Boolean   @default(false)
  verifiedAt        DateTime?
  verifiedBy        String?
  marketplaceStatus String    @default("pending") // "pending", "approved", "active", "suspended", "inactive"
  approvedAt        DateTime?

  // Capacity & Availability
  maxClients           Int     @default(15)
  currentClients       Int     @default(0)
  hoursPerWeek         Int?
  timezone             String?
  availabilitySchedule Json? // Weekly availability schedule

  // Ratings & Performance
  overallRating        Float? @default(0)
  totalReviews         Int    @default(0)
  completedEngagements Int    @default(0)
  responseTime         Int? // Average response time in hours
  clientRetentionRate  Float? @default(0)

  // Pricing
  hourlyRate         Decimal? @db.Decimal(8, 2)
  monthlyRetainerMin Decimal? @db.Decimal(10, 2)
  monthlyRetainerMax Decimal? @db.Decimal(10, 2)
  projectRateMin     Decimal? @db.Decimal(10, 2)
  acceptsHourly      Boolean  @default(true)
  acceptsRetainer    Boolean  @default(true)
  acceptsProject     Boolean  @default(true)
  acceptsValueBased  Boolean  @default(false)

  // Profile Content
  headline               String? @db.Text // Short tagline
  bio                    String? @db.Text // Detailed bio
  videoIntroUrl          String? // Video introduction URL
  portfolioUrl           String? // Portfolio/website URL
  linkedinUrl            String?
  achievementsHighlights Json? // Key achievements and case studies

  // Background Check & Compliance
  backgroundCheckStatus String    @default("pending") // "pending", "in_progress", "approved", "failed"
  backgroundCheckDate   DateTime?
  insuranceCoverage     Decimal?  @db.Decimal(12, 2) // Professional liability insurance amount
  insuranceProvider     String?
  insuranceExpiryDate   DateTime?

  // Onboarding & Training
  onboardingCompleted      Boolean   @default(false)
  onboardingCompletedAt    DateTime?
  trainingModulesCompleted Json? // Track completed training
  platformCertifications   String[] // AdvisorOS platform certifications

  // Marketing & Preferences
  willingToTravel      Boolean  @default(false)
  remoteOnly           Boolean  @default(true)
  languages            String[] // ["English", "Spanish", "Mandarin"]
  preferredClientTypes String[] // Preferred client characteristics
  notInterestedIn      String[] // Industries/types to avoid

  // Internal Notes
  internalNotes String?  @db.Text
  riskFlags     String[] // Any risk indicators

  // Metadata
  customFields Json?
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdBy    String?
  updatedBy    String?

  // Relations
  serviceOfferings    ServiceOffering[]
  satisfactionMetrics ClientSatisfactionMetric[]
  marketplaceMatches  AdvisorMarketplaceMatch[]

  @@index([userId])
  @@index([marketplaceStatus])
  @@index([isAvailable])
  @@index([isVerified])
  @@index([overallRating])
  @@index([industries])
  @@index([services])
  @@map("advisor_profiles")
}

model ClientPortalAccess {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Access Control
  accessLevel String @default("view") // "view", "edit", "admin", "owner"
  permissions Json // Granular permissions object

  // Features Access
  canViewFinancials  Boolean @default(true)
  canUploadDocuments Boolean @default(true)
  canMessageAdvisor  Boolean @default(true)
  canApproveInvoices Boolean @default(false)
  canManageTeam      Boolean @default(false)
  canExportData      Boolean @default(false)

  // Portal Features
  dashboardConfig         Json? // Customized dashboard layout
  notificationPreferences Json? // Email/SMS notification settings
  favoriteReports         String[] // Saved report IDs

  // Session Management
  lastAccessedAt DateTime?
  accessCount    Int       @default(0)
  ipWhitelist    String[] // Allowed IP addresses
  deviceTokens   Json? // For mobile app access

  // Security
  mfaEnabled     Boolean @default(false)
  mfaMethod      String? // "totp", "sms", "email"
  sessionTimeout Int     @default(30) // Minutes of inactivity

  // Invitation & Onboarding
  invitedBy           String?
  invitedAt           DateTime?
  acceptedAt          DateTime?
  onboardingCompleted Boolean   @default(false)

  // Metadata
  isActive  Boolean   @default(true)
  expiresAt DateTime? // For temporary access
  notes     String?   @db.Text
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, clientId])
  @@index([userId])
  @@index([clientId])
  @@index([accessLevel])
  @@index([isActive])
  @@map("client_portal_access")
}

model EngagementRateCard {
  id          String  @id @default(cuid())
  name        String
  description String? @db.Text

  // Pricing Model
  pricingModel String // "hourly", "monthly_retainer", "project_fixed", "value_based", "hybrid"

  // Hourly Pricing
  hourlyRate   Decimal? @db.Decimal(8, 2)
  minimumHours Int?

  // Retainer Pricing
  monthlyRetainer  Decimal? @db.Decimal(10, 2)
  retainerIncludes String?  @db.Text // What's included in retainer
  overageRate      Decimal? @db.Decimal(8, 2) // Rate for hours beyond retainer

  // Project Pricing
  projectFee        Decimal? @db.Decimal(10, 2)
  projectScope      String?  @db.Text
  milestonePayments Json? // Payment schedule

  // Value-Based Pricing
  valueBasisType  String? // "percentage_of_savings", "percentage_of_revenue", "flat_success_fee"
  valuePercentage Float?
  valueMinimum    Decimal? @db.Decimal(10, 2)
  valueMaximum    Decimal? @db.Decimal(10, 2)

  // Service Details
  serviceType      String // "cfo_services", "controller_services", "bookkeeping", "advisory", "specialized"
  serviceLevel     String // "essential", "professional", "premium", "enterprise"
  includedServices String[] // List of included services
  deliverables     Json? // Expected deliverables

  // Client Qualification
  minAnnualRevenue    Decimal? @db.Decimal(15, 2)
  maxAnnualRevenue    Decimal? @db.Decimal(15, 2)
  targetIndustries    String[] // Industries this rate card applies to
  targetBusinessTypes String[] // Business entity types

  // Terms & Conditions
  contractLength    Int? // Months
  noticePeriod      Int? // Days required for termination
  paymentTerms      String // "net_15", "net_30", "upfront", "milestone"
  lateFeePercentage Float?

  // Discount & Promotions
  discountAvailable  Boolean  @default(false)
  discountType       String? // "percentage", "fixed_amount", "first_month_free"
  discountValue      Decimal? @db.Decimal(10, 2)
  discountConditions String?  @db.Text
  promotionalCode    String?

  // Availability & Status
  isActive      Boolean   @default(true)
  isPublic      Boolean   @default(false) // Public pricing vs custom quotes
  effectiveDate DateTime?
  expiryDate    DateTime?

  // Organization & Creator
  organizationId String?
  advisorId      String? // If specific to an advisor
  createdBy      String?

  // Usage Tracking
  timesUsed    Int     @default(0)
  totalRevenue Decimal @default(0) @db.Decimal(15, 2)

  // Metadata
  customFields Json?
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  engagements Engagement[] @relation("EngagementRateCard")

  @@index([pricingModel])
  @@index([serviceType])
  @@index([serviceLevel])
  @@index([isActive])
  @@index([isPublic])
  @@index([organizationId])
  @@index([advisorId])
  @@map("engagement_rate_cards")
}

model ServiceOffering {
  id          String @id @default(cuid())
  name        String
  description String @db.Text
  category    String // "strategic_advisory", "financial_operations", "specialized_services", "compliance", "analytics"
  serviceType String // "cfo_services", "controller_services", "cash_flow_management", "fundraising_support", "m_and_a_advisory", "tax_planning", "financial_modeling", "board_reporting"

  // Service Details
  deliverables      Json // List of specific deliverables
  methodology       String? @db.Text // How the service is delivered
  estimatedDuration String? // "1-2 weeks", "Ongoing", "3 months"
  effortLevel       String // "low", "medium", "high", "variable"

  // Automation Level
  automationLevel     Int      @default(0) // 0-100% automation capability
  aiAssisted          Boolean  @default(false)
  requiresHumanReview Boolean  @default(true)
  toolsUsed           String[] // AdvisorOS features leveraged

  // Pricing Guidelines
  typicalPricing Json? // Pricing range and structure
  pricingModel   String // "included_in_retainer", "hourly_addon", "project_fee", "value_based"

  // Requirements & Prerequisites
  prerequisites      Json? // Required data, systems, client readiness
  dataRequired       String[] // What data is needed
  integrationsNeeded String[] // Required integrations
  clientCommitment   String?  @db.Text // What client needs to provide

  // Target Clients
  bestFor       String[] // Client characteristics this is best for
  industries    String[] // Industries where applicable
  businessSizes String[] // Applicable business sizes

  // Advisor Requirements
  requiredCertifications String[] // Certifications needed to offer this service
  minYearsExperience     Int?
  specializationRequired Boolean  @default(false)

  // Service Status
  isActive        Boolean @default(true)
  isStandard      Boolean @default(true) // Standard vs custom service
  popularityScore Float   @default(0) // Demand metric
  successRate     Float?  @default(0) // Completion/satisfaction rate

  // Marketing
  heroImage    String? // Marketing image URL
  caseStudies  Json? // Success stories
  testimonials Json? // Client testimonials
  videoUrl     String? // Explainer video

  // Advisor Association
  advisorId          String?
  advisorProfile     AdvisorProfile? @relation(fields: [advisorId], references: [id])
  exclusiveToAdvisor Boolean         @default(false)

  // Organization
  organizationId       String?
  isMarketplaceService Boolean @default(true) // Available in marketplace

  // Metadata
  tags         String[] // For search and filtering
  customFields Json?
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdBy    String?
  updatedBy    String?

  @@index([category])
  @@index([serviceType])
  @@index([isActive])
  @@index([automationLevel])
  @@index([advisorId])
  @@index([organizationId])
  @@index([industries])
  @@index([tags])
  @@map("service_offerings")
}

model AdvisorMarketplaceMatch {
  id String @id @default(cuid())

  // Matching Participants
  clientId         String
  client           Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  advisorProfileId String
  advisorProfile   AdvisorProfile @relation(fields: [advisorProfileId], references: [id], onDelete: Cascade)

  // Match Quality
  matchScore            Float // 0-100 AI-calculated match quality
  matchReason           Json // Why this match was suggested
  matchAlgorithmVersion String // For tracking improvements

  // Match Status
  status          String   @default("suggested") // "suggested", "contacted", "meeting_scheduled", "proposal_sent", "accepted", "rejected", "expired"
  statusUpdatedAt DateTime @default(now())

  // Client Request Details
  requestedServices String[] // What client needs
  budgetRange       Json? // Min/max budget
  startDate         DateTime?
  urgency           String? // "low", "normal", "high", "urgent"
  clientNotes       String?   @db.Text

  // Advisor Response
  advisorInterested Boolean?
  advisorResponse   String?   @db.Text
  proposedRate      Decimal?  @db.Decimal(10, 2)
  proposalDocument  String? // URL to proposal
  respondedAt       DateTime?

  // Meeting & Communication
  meetingScheduledAt DateTime?
  meetingCompletedAt DateTime?
  meetingNotes       String?   @db.Text
  communicationLog   Json? // History of interactions

  // Engagement Creation
  engagementCreated   Boolean   @default(false)
  engagementId        String?
  engagementStartedAt DateTime?

  // Rejection Tracking
  rejectedBy      String? // "client", "advisor", "system"
  rejectionReason String?   @db.Text
  rejectedAt      DateTime?

  // System Tracking
  timesShown      Int       @default(1)
  clickedByClient Boolean   @default(false)
  clientViewedAt  DateTime?

  // Expiration
  expiresAt DateTime?
  isExpired Boolean   @default(false)

  // Metadata
  organizationId String
  customFields   Json?
  deletedAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([clientId])
  @@index([advisorProfileId])
  @@index([status])
  @@index([matchScore])
  @@index([organizationId])
  @@index([expiresAt])
  @@index([engagementId])
  @@map("advisor_marketplace_matches")
}

model ClientSatisfactionMetric {
  id String @id @default(cuid())

  // Rating Context
  clientId         String
  client           Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  advisorUserId    String
  advisorUser      User           @relation("RatingAdvisor", fields: [advisorUserId], references: [id])
  advisorProfileId String
  advisorProfile   AdvisorProfile @relation(fields: [advisorProfileId], references: [id])
  engagementId     String?
  engagement       Engagement?    @relation(fields: [engagementId], references: [id])

  // Rating Type
  ratingType    String // "engagement_completion", "monthly_review", "quarterly_review", "annual_review", "ad_hoc"
  periodCovered String? // "Q1 2025", "January 2025", etc.

  // Satisfaction Scores (1-10 scale)
  overallSatisfaction      Int
  communicationRating      Int?
  responsivenessRating     Int?
  expertiseRating          Int?
  valueForMoneyRating      Int?
  professionalismRating    Int?
  recommendationLikelihood Int? // NPS score 0-10

  // Qualitative Feedback
  whatWorkedWell       String? @db.Text
  areasForImprovement  String? @db.Text
  specificAchievements String? @db.Text
  testimonial          String? @db.Text
  isPublicTestimonial  Boolean @default(false)

  // Detailed Ratings
  serviceRatings Json? // Ratings for specific services delivered
  timeliness     Int? // Met deadlines
  accuracy       Int? // Work quality
  proactiveness  Int? // Proactive recommendations

  // Outcome Metrics
  problemsSolved String[] // Issues addressed
  businessImpact String?  @db.Text // Measurable impact
  wouldHireAgain Boolean?
  wouldRecommend Boolean?

  // Response & Follow-up
  advisorResponded    Boolean   @default(false)
  advisorResponseText String?   @db.Text
  respondedAt         DateTime?
  followUpRequired    Boolean   @default(false)
  followUpCompleted   Boolean   @default(false)

  // Review Metadata
  reviewedBy       String
  reviewer         User     @relation("RatingCreator", fields: [reviewedBy], references: [id])
  reviewDate       DateTime @default(now())
  isVerifiedClient Boolean  @default(true)

  // Publishing
  isPublished      Boolean   @default(false)
  publishedAt      DateTime?
  displayOnProfile Boolean   @default(false)

  // Internal
  flaggedForReview Boolean @default(false)
  internalNotes    String? @db.Text

  // Metadata
  organizationId String
  customFields   Json?
  deletedAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([clientId])
  @@index([advisorUserId])
  @@index([advisorProfileId])
  @@index([engagementId])
  @@index([overallSatisfaction])
  @@index([recommendationLikelihood])
  @@index([reviewDate])
  @@index([isPublished])
  @@index([organizationId])
  @@map("client_satisfaction_metrics")
}

model RevenueShare {
  id String @id @default(cuid())

  // Transaction Details
  engagementId String
  engagement   Engagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  advisorId    String
  advisorUser  User       @relation(fields: [advisorId], references: [id])
  clientId     String
  client       Client     @relation(fields: [clientId], references: [id])

  // Revenue Breakdown
  grossRevenue          Decimal @db.Decimal(12, 2) // Total client payment
  platformFee           Decimal @db.Decimal(12, 2) // AdvisorOS commission
  platformFeePercentage Float // Commission rate applied
  advisorPayout         Decimal @db.Decimal(12, 2) // Amount to advisor

  // Period Covered
  periodType  String // "monthly", "project", "hourly", "milestone"
  periodStart DateTime
  periodEnd   DateTime

  // Payment Details
  invoiceId     String?
  invoice       Invoice?  @relation(fields: [invoiceId], references: [id])
  clientPaidAt  DateTime? // When client paid
  advisorPaidAt DateTime? // When advisor was paid out

  // Payment Status
  status        String    @default("pending") // "pending", "client_paid", "advisor_paid", "disputed", "refunded"
  disputeReason String?   @db.Text
  disputedAt    DateTime?
  resolvedAt    DateTime?

  // Transaction Fees
  stripeFee          Decimal @default(0) @db.Decimal(10, 2)
  otherFees          Decimal @default(0) @db.Decimal(10, 2)
  netPlatformRevenue Decimal @db.Decimal(12, 2)

  // Adjustments
  adjustmentReason String? @db.Text
  adjustmentAmount Decimal @default(0) @db.Decimal(10, 2)

  // Tax & Compliance
  tax1099Reportable Boolean @default(true)
  taxYear           Int?

  // Payout Details
  payoutMethod    String? // "ach", "wire", "check", "international"
  payoutBatchId   String? // For batch processing
  payoutReference String? // Bank reference number

  // Performance Bonuses
  bonusEarned Decimal @default(0) @db.Decimal(10, 2)
  bonusReason String? @db.Text

  // Metadata
  organizationId String
  notes          String?   @db.Text
  customFields   Json?
  deletedAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([engagementId])
  @@index([advisorId])
  @@index([clientId])
  @@index([status])
  @@index([periodStart])
  @@index([clientPaidAt])
  @@index([advisorPaidAt])
  @@index([organizationId])
  @@index([taxYear])
  @@map("revenue_shares")
}

// Job Execution Tracking for Bull Queue System
model JobExecution {
  id    String @id @default(cuid())
  jobId String // Bull job ID

  // Job Identification
  jobName   String // e.g., "document:ocr", "email:task_assignment"
  jobType   String // e.g., "document_processing", "ai_processing", "email"
  queueName String // The queue this job was processed from

  // Multi-tenant Security
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Execution Status
  status      String    @default("pending") // "pending", "processing", "completed", "failed", "cancelled"
  priority    Int       @default(0)
  startedAt   DateTime?
  completedAt DateTime?
  durationMs  Int? // Execution duration in milliseconds

  // Retry Information
  attempts   Int @default(0)
  maxRetries Int @default(3)

  // Job Data
  inputParams  Json? // Input parameters for the job
  outputResult Json? // Result of successful execution

  // Error Tracking
  errorMessage String? @db.Text
  stackTrace   String? @db.Text
  errorCode    String? // Categorized error code

  // Worker Information
  workerId   String? // ID of the worker that processed this job
  workerHost String? // Hostname/IP of the worker

  // Performance Metrics
  memoryUsage Int? // Peak memory usage in bytes
  cpuTime     Int? // CPU time in milliseconds

  // Metadata
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([jobId])
  @@index([jobType])
  @@index([queueName])
  @@index([organizationId])
  @@index([status])
  @@index([createdAt])
  @@index([completedAt])
  @@index([workerId])
  @@map("job_executions")
}

// Document Processing Pipeline
model DocumentProcessing {
  id String @id @default(cuid())

  // Document Reference
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  // Multi-tenant Security
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Processing Status
  processingStatus String @default("pending") // "pending", "processing", "completed", "failed", "manual_review"

  // OCR Quality Metrics
  confidenceScore Float? // Overall confidence score 0-1

  // Classification Results
  classificationMetadata Json? // Document type, category, tags

  // Extraction Results
  extractionMetadata Json? // Extracted fields, tables, key-value pairs

  // Processing Details
  processingEngine String? // "azure_form_recognizer", "aws_textract", "google_document_ai"
  processingModel  String? // Specific model version used
  processingTime   Int? // Processing duration in milliseconds

  // Error Tracking
  errorMessage String? @db.Text
  errorCode    String?
  retryCount   Int     @default(0)
  maxRetries   Int     @default(3)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  processedAt DateTime?

  @@unique([documentId])
  @@index([organizationId])
  @@index([processingStatus])
  @@index([confidenceScore])
  @@index([createdAt])
  @@map("document_processing")
}

// Document Embeddings for AI Semantic Search (requires pgvector extension)
model DocumentEmbedding {
  id String @id @default(cuid())

  // Document Reference
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  // Multi-tenant Security
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Embedding Details
  embeddingModel String // "openai-ada-002", "openai-text-embedding-3-small", etc.
  embedding      Unsupported("vector(1536)") // pgvector type - 1536 dimensions for OpenAI ada-002

  // Chunking Information
  chunkIndex Int    @default(0) // For documents split into chunks
  chunkText  String @db.Text // The text that was embedded

  // Context Metadata
  metadata Json? // Page number, section, document metadata

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([documentId])
  @@index([organizationId])
  @@index([embeddingModel])
  @@index([chunkIndex])
  @@map("document_embeddings")
}

// Document Real-time Collaboration Sessions
model DocumentSession {
  id String @id @default(cuid())

  // Document Reference
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  // Multi-tenant Security
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Session Details
  sessionId String @unique // WebSocket session identifier
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Session State
  status      String  @default("active") // "active", "inactive", "disconnected"
  isEditing   Boolean @default(false)
  currentPage Int? // Current page being viewed

  // Collaboration Data
  cursorPosition Json? // Current cursor/selection position
  activeTooling  Json? // Current annotation tools in use

  // Connection Info
  ipAddress  String?
  userAgent  String? @db.Text
  deviceType String? // "desktop", "tablet", "mobile"

  // Timestamps
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastActivityAt DateTime  @default(now())
  disconnectedAt DateTime?

  @@index([documentId])
  @@index([organizationId])
  @@index([userId])
  @@index([status])
  @@index([sessionId])
  @@index([lastActivityAt])
  @@map("document_sessions")
}

// API Usage Metrics for Rate Limiting & Analytics
model ApiUsageMetric {
  id String @id @default(cuid())

  // Multi-tenant Security
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // User Context
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Request Details
  endpoint     String // API endpoint called
  method       String // HTTP method
  statusCode   Int // Response status code
  responseTime Int // Response time in milliseconds

  // Request Metadata
  ipAddress String?
  userAgent String? @db.Text
  requestId String? @unique // Unique request identifier

  // Rate Limiting
  rateLimitKey   String // Key used for rate limiting (e.g., "org:123:api:documents")
  rateLimitUsed  Int // Current usage count in window
  rateLimitLimit Int // Limit for this window
  rateLimitReset DateTime // When the rate limit window resets

  // Resource Usage
  databaseQueries Int? // Number of database queries
  cacheHits       Int? // Number of cache hits
  cacheMisses     Int? // Number of cache misses
  dataTransferred BigInt? // Bytes transferred

  // Error Tracking
  errorMessage String? @db.Text
  errorCode    String?

  // Timestamps
  createdAt DateTime @default(now())

  @@index([organizationId])
  @@index([userId])
  @@index([endpoint])
  @@index([rateLimitKey])
  @@index([statusCode])
  @@index([createdAt])
  @@index([requestId])
  @@map("api_usage_metrics")
}

// Webhook Delivery Tracking for Integration Reliability
model WebhookDelivery {
  id String @id @default(cuid())

  // Multi-tenant Security
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Webhook Configuration
  webhookEndpoint String // Target URL
  webhookType     String // "stripe", "quickbooks", "custom"
  eventType       String // Event that triggered webhook

  // Delivery Status
  status       String @default("pending") // "pending", "sending", "delivered", "failed", "retrying"
  attemptCount Int    @default(0)
  maxAttempts  Int    @default(3)

  // Request Details
  httpMethod     String @default("POST")
  requestHeaders Json? // Headers sent
  requestBody    Json // Payload sent

  // Response Details
  responseStatus  Int? // HTTP status code
  responseHeaders Json? // Response headers received
  responseBody    String? @db.Text // Response body

  // Timing
  requestedAt  DateTime  @default(now())
  deliveredAt  DateTime?
  nextRetryAt  DateTime?
  responseTime Int? // Response time in milliseconds

  // Error Tracking
  errorMessage String? @db.Text
  errorCode    String?

  // Security
  signature       String? // Webhook signature for verification
  signatureMethod String? // "hmac-sha256", etc.

  // Metadata
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([status])
  @@index([webhookType])
  @@index([eventType])
  @@index([attemptCount])
  @@index([nextRetryAt])
  @@index([requestedAt])
  @@map("webhook_deliveries")
}

// ============================================================================
// JOB POSTING & APPLICANT TRACKING SYSTEM (ATS)
// ============================================================================

model JobPosting {
  id String @id @default(cuid())

  // Multi-tenant Security
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Job Details
  title           String
  department      String? // "Accounting", "Tax", "Audit", "Advisory", "Operations"
  location        String? // "Remote", "Hybrid", "New York, NY"
  employmentType  String // "full_time", "part_time", "contract", "temporary", "internship"
  experienceLevel String // "entry", "mid", "senior", "lead", "director", "executive"

  // Job Description
  description      String   @db.Text // Full job description
  responsibilities String[] // Array of key responsibilities
  requirements     String[] // Required qualifications
  preferredSkills  String[] // Nice-to-have skills

  // Compensation
  salaryMin        Decimal? @db.Decimal(10, 2)
  salaryMax        Decimal? @db.Decimal(10, 2)
  salaryCurrency   String   @default("USD")
  compensationType String? // "salary", "hourly", "commission", "equity"
  benefits         String[] // List of benefits

  // Status & Workflow
  status      String @default("draft") // "draft", "active", "paused", "closed", "filled", "cancelled"
  priority    String @default("normal") // "low", "normal", "high", "urgent"
  openings    Int    @default(1) // Number of positions
  filledCount Int    @default(0)

  // Hiring Team
  hiringManagerId String?
  hiringManager   User?   @relation("JobHiringManager", fields: [hiringManagerId], references: [id])
  recruiterId     String?
  recruiter       User?   @relation("JobRecruiter", fields: [recruiterId], references: [id])

  // Application Pipeline
  pipelineStages Json // Array of pipeline stages with order

  // Publishing & Distribution
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  expiresAt   DateTime?
  isInternal  Boolean   @default(false) // Internal vs external posting

  // Third-Party Job Boards
  linkedinJobId     String?   @unique // LinkedIn job posting ID
  indeedJobId       String?   @unique // Indeed job posting ID
  zipRecruiterJobId String?   @unique // ZipRecruiter job posting ID
  distributedTo     String[] // Array of job boards where posted
  distributedAt     DateTime?

  // SEO & Searchability
  slug     String   @unique // URL-friendly slug
  keywords String[] // Keywords for search
  tags     String[] // Categorization tags

  // Application Settings
  applicationDeadline      DateTime?
  customQuestions          Json? // Custom screening questions
  requiredDocuments        String[] // "resume", "cover_letter", "portfolio", "references"
  allowsRemoteWork         Boolean   @default(false)
  visaSponsorshipAvailable Boolean   @default(false)

  // Analytics
  viewCount        Int      @default(0)
  applicationCount Int      @default(0)
  avgTimeToFill    Int? // Days to fill position
  costPerHire      Decimal? @db.Decimal(10, 2)

  // Metadata
  metadata  Json? // Additional custom fields
  createdBy String
  creator   User      @relation("JobPostingCreator", fields: [createdBy], references: [id])
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  applications Application[]
  interviews   Interview[]

  @@index([organizationId])
  @@index([status])
  @@index([employmentType])
  @@index([experienceLevel])
  @@index([hiringManagerId])
  @@index([recruiterId])
  @@index([isPublished])
  @@index([publishedAt])
  @@index([slug])
  @@index([keywords])
  @@index([tags])
  @@index([createdAt])
  @@map("job_postings")
}

model Candidate {
  id String @id @default(cuid())

  // Multi-tenant Security
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Personal Information
  firstName    String
  lastName     String
  email        String
  phone        String?
  location     String? // City, State
  linkedinUrl  String?
  portfolioUrl String?
  websiteUrl   String?

  // Professional Information
  currentTitle    String?
  currentCompany  String?
  yearsExperience Int?

  // Resume & Documents
  resumeFileUrl    String? // Primary resume
  resumeFileId     String? // Document ID if stored in Document model
  resumeParsedData Json? // Structured data from resume parsing

  coverLetterUrl      String?
  portfolioFileUrl    String?
  additionalDocuments Json? // Array of additional document URLs

  // Skills & Qualifications
  skills         String[] // Extracted or manually added skills
  certifications String[]
  education      Json? // Array of education entries
  workHistory    Json? // Array of work experience entries

  // Source & Attribution
  source        String // "linkedin", "indeed", "ziprecruiter", "referral", "career_site", "agency", "direct"
  sourceDetails String? // Referring URL, referrer name, etc.
  referredBy    String? // User ID if referred by team member

  // Status & Tags
  status String   @default("new") // "new", "screening", "active", "passive", "hired", "rejected", "withdrawn"
  tags   String[] // Custom tags for categorization
  rating Int? // 1-5 star rating

  // Privacy & Compliance
  consentToContact Boolean   @default(true)
  consentDate      DateTime?
  gdprConsent      Boolean   @default(false)
  eeocData         Json? // Equal Employment Opportunity data (anonymized)

  // Communication
  lastContactedAt DateTime?
  lastContactedBy String?
  emailOptIn      Boolean   @default(true)
  smsOptIn        Boolean   @default(false)

  // Analytics
  profileViews Int       @default(0)
  lastViewedAt DateTime?

  // Deduplication
  emailHash String // Hash of email for duplicate detection
  phoneHash String? // Hash of phone for duplicate detection

  // Metadata
  notes     String?   @db.Text
  metadata  Json? // Custom fields
  createdBy String?
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  applications   Application[]
  interviews     Interview[]
  communications CandidateCommunication[]
  activities     CandidateActivity[]

  @@unique([organizationId, emailHash]) // Prevent duplicate candidates per org
  @@index([organizationId])
  @@index([email])
  @@index([status])
  @@index([source])
  @@index([tags])
  @@index([rating])
  @@index([createdAt])
  @@index([emailHash])
  @@map("candidates")
}

model Application {
  id String @id @default(cuid())

  // Multi-tenant Security
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Core Relationships
  candidateId  String
  candidate    Candidate  @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobPostingId String
  jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)

  // Application Details
  applicationDate DateTime          @default(now())
  status          String            @default("new") // "new", "screening", "interviewing", "offer", "hired", "rejected", "withdrawn"
  currentStageId  String? // Current pipeline stage ID
  currentStage    ApplicationStage? @relation(fields: [currentStageId], references: [id])

  // Submission Data
  coverLetter   String? @db.Text
  customAnswers Json? // Answers to custom application questions
  appliedVia    String // "career_site", "linkedin", "indeed", "referral", "direct"

  // Documents
  resumeUrl      String
  coverLetterUrl String?
  additionalDocs Json? // Additional submitted documents

  // Resume Parsing Results
  parsedResumeData  Json? // Structured data from Azure Form Recognizer
  parsingStatus     String    @default("pending") // "pending", "processing", "completed", "failed"
  parsingConfidence Float? // 0-1 confidence score
  parsedAt          DateTime?

  // AI Screening
  aiScreeningScore Float? // 0-100 AI-calculated fit score
  aiScreeningNotes Json? // AI-generated insights
  keywordMatches   String[] // Matched keywords from job description
  skillMatches     Json? // Matched skills with confidence scores

  // Timeline & Progress
  stageHistory       Json // Array of stage transitions with timestamps
  daysInCurrentStage Int  @default(0)
  daysInPipeline     Int  @default(0)

  // Rating & Evaluation
  overallRating     Int? // 1-5 stars
  technicalRating   Int? // 1-5 stars
  culturalFitRating Int? // 1-5 stars
  evaluationNotes   String? @db.Text

  // Rejection Management
  rejectedAt         DateTime?
  rejectedBy         String?
  rejectionReason    String?   @db.Text
  rejectionCategory  String? // "qualifications", "experience", "location", "salary", "culture_fit", "other"
  rejectionEmailSent Boolean   @default(false)

  // Offer Management
  offerExtended       Boolean   @default(false)
  offerDate           DateTime?
  offerAmount         Decimal?  @db.Decimal(10, 2)
  offerAccepted       Boolean?
  offerAcceptedDate   DateTime?
  offerDeclinedReason String?   @db.Text

  // Assignment & Ownership
  assignedToId String?
  assignedTo   User?     @relation("ApplicationAssignee", fields: [assignedToId], references: [id])
  assignedAt   DateTime?

  // Communication
  lastContactedAt  DateTime?
  nextFollowUpDate DateTime?

  // Flags & Alerts
  isFlagged  Boolean   @default(false)
  flagReason String?   @db.Text
  isArchived Boolean   @default(false)
  archivedAt DateTime?

  // Metadata
  metadata  Json? // Custom fields
  notes     String?   @db.Text
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  interviews Interview[]
  activities ApplicationActivity[]

  @@unique([candidateId, jobPostingId]) // One application per candidate per job
  @@index([organizationId])
  @@index([candidateId])
  @@index([jobPostingId])
  @@index([status])
  @@index([currentStageId])
  @@index([assignedToId])
  @@index([applicationDate])
  @@index([aiScreeningScore])
  @@index([parsingStatus])
  @@map("applications")
}

model ApplicationStage {
  id String @id @default(cuid())

  // Multi-tenant Security
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Stage Details
  name        String // "Applied", "Screening", "Phone Interview", "Technical Interview", "Offer", etc.
  description String? @db.Text
  type        String // "screening", "interview", "assessment", "offer", "hired", "rejected"
  order       Int // Order in pipeline (0-based)

  // Stage Configuration
  isActive        Boolean @default(true)
  isDefault       Boolean @default(false) // Is this the default initial stage?
  allowManualMove Boolean @default(true) // Can applications be manually moved to this stage?

  // Automation Rules
  autoAdvanceConditions Json? // Conditions for automatic advancement
  autoRejectConditions  Json? // Conditions for automatic rejection
  requiredActions       String[] // Actions required before advancing

  // Notifications
  notifyHiringManager    Boolean @default(false)
  notifyRecruiter        Boolean @default(false)
  candidateEmailTemplate String? // Email template to send to candidate

  // SLA & Timing
  targetDays Int? // Target days in this stage
  maxDays    Int? // Maximum days before alert

  // Analytics
  applicationCount Int    @default(0)
  avgTimeInStage   Int? // Average days applications spend in this stage
  conversionRate   Float? // Percentage that advance to next stage

  // Metadata
  metadata  Json?
  createdBy String?
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  applications Application[]

  @@unique([organizationId, name]) // Unique stage names per org
  @@index([organizationId])
  @@index([type])
  @@index([order])
  @@index([isActive])
  @@map("application_stages")
}

model Interview {
  id String @id @default(cuid())

  // Multi-tenant Security
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Core Relationships
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  candidateId   String
  candidate     Candidate   @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobPostingId  String
  jobPosting    JobPosting  @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)

  // Interview Details
  title String // "Phone Screen", "Technical Interview", "Final Round"
  type  String // "phone", "video", "in_person", "technical", "panel", "behavioral"
  round Int    @default(1)

  // Scheduling
  scheduledAt DateTime?
  startTime   DateTime?
  endTime     DateTime?
  duration    Int? // Duration in minutes
  timezone    String?

  // Status
  status String @default("scheduled") // "scheduled", "confirmed", "in_progress", "completed", "cancelled", "no_show"

  // Location / Platform
  location        String? // Office address or "Remote"
  meetingLink     String? // Zoom, Teams, Google Meet link
  meetingId       String? // Meeting ID/code
  meetingPassword String? // Meeting password
  dialInNumber    String?

  // Participants
  interviewers Json // Array of interviewer user IDs and names
  organizerId  String?
  organizer    User?   @relation("InterviewOrganizer", fields: [organizerId], references: [id])

  // Interview Content
  interviewGuide Json? // Structured interview questions and topics
  focusAreas     String[] // "technical_skills", "leadership", "culture_fit", "problem_solving"

  // Evaluation
  feedback            Json? // Structured feedback from each interviewer
  overallRating       Int? // 1-5 stars
  technicalRating     Int?
  communicationRating Int?
  cultureFitRating    Int?
  recommendation      String? // "strong_hire", "hire", "neutral", "no_hire", "strong_no_hire"

  // Evaluation Notes
  strengths       String? @db.Text
  weaknesses      String? @db.Text
  additionalNotes String? @db.Text

  // Recording & Artifacts
  recordingUrl     String? // Interview recording
  transcriptUrl    String? // Transcript if available
  notesDocumentUrl String? // Shared notes document

  // Reminders & Notifications
  candidateNotified  Boolean   @default(false)
  candidateConfirmed Boolean   @default(false)
  reminderSentAt     DateTime?

  // Rescheduling
  isRescheduled     Boolean   @default(false)
  rescheduleCount   Int       @default(0)
  rescheduleReason  String?   @db.Text
  originalStartTime DateTime?

  // Cancellation
  cancelledAt        DateTime?
  cancelledBy        String?
  cancellationReason String?   @db.Text

  // Metadata
  metadata  Json?
  createdBy String?
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([organizationId])
  @@index([applicationId])
  @@index([candidateId])
  @@index([jobPostingId])
  @@index([status])
  @@index([scheduledAt])
  @@index([type])
  @@map("interviews")
}

model CandidateCommunication {
  id String @id @default(cuid())

  // Multi-tenant Security
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Core Relationship
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  // Communication Details
  type      String // "email", "sms", "phone_call", "video_call", "in_person"
  direction String // "inbound", "outbound"

  // Content
  subject  String?
  body     String? @db.Text
  htmlBody String? @db.Text

  // Sender/Recipient
  from String // Email or phone
  to   String // Email or phone
  cc   String[] @default([])
  bcc  String[] @default([])

  // Status
  status      String    @default("sent") // "draft", "scheduled", "sent", "delivered", "opened", "clicked", "bounced", "failed"
  sentAt      DateTime?
  deliveredAt DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?

  // Tracking
  openCount  Int @default(0)
  clickCount Int @default(0)

  // Attachments
  attachments Json? // Array of attachment URLs

  // Template & Automation
  templateId  String?
  isAutomated Boolean @default(false)
  triggeredBy String? // Event that triggered automated message

  // Provider Details
  provider     String? // "sendgrid", "twilio", "manual"
  externalId   String? // Provider's message ID
  errorMessage String? @db.Text

  // Metadata
  metadata  Json?
  createdBy String?
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([organizationId])
  @@index([candidateId])
  @@index([type])
  @@index([status])
  @@index([sentAt])
  @@map("candidate_communications")
}

model CandidateActivity {
  id String @id @default(cuid())

  // Multi-tenant Security
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Core Relationship
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  // Activity Details
  activityType String // "profile_viewed", "email_sent", "interview_scheduled", "note_added", "status_changed", "rating_updated"
  description  String @db.Text

  // Activity Data
  changes  Json? // Before/after values for updates
  metadata Json? // Additional activity-specific data

  // Actor
  performedBy     String?
  performedByUser User?   @relation("ActivityPerformer", fields: [performedBy], references: [id])

  // Timestamps
  performedAt DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([organizationId])
  @@index([candidateId])
  @@index([activityType])
  @@index([performedAt])
  @@map("candidate_activities")
}

model ApplicationActivity {
  id String @id @default(cuid())

  // Multi-tenant Security
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Core Relationship
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  // Activity Details
  activityType String // "stage_changed", "interview_scheduled", "feedback_added", "assigned", "rejected", "offer_extended"
  description  String @db.Text

  // Activity Data
  changes  Json? // Before/after values
  metadata Json?

  // Actor
  performedBy     String?
  performedByUser User?   @relation("ApplicationActivityPerformer", fields: [performedBy], references: [id])

  // Timestamps
  performedAt DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([organizationId])
  @@index([applicationId])
  @@index([activityType])
  @@index([performedAt])
  @@map("application_activities")
}
