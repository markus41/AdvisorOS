'use client'

import React, { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import {
  ChevronDown,
  ChevronUp,
  Eye,
  MoreHorizontal,
  Filter,
  SortAsc,
  SortDesc,
  Search,
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { Badge } from '@/components/ui/badge'\nimport { ScreenReaderOnly } from '@/components/ui/screen-reader-only'\nimport { cn } from '@/lib/utils'\n\ninterface Column {\n  key: string\n  label: string\n  sortable?: boolean\n  mobileLabel?: string\n  hideOnMobile?: boolean\n  render?: (value: any, row: any) => React.ReactNode\n}\n\ninterface MobileResponsiveTableProps {\n  data: any[]\n  columns: Column[]\n  searchable?: boolean\n  searchPlaceholder?: string\n  onRowClick?: (row: any) => void\n  onRowSelect?: (selectedRows: any[]) => void\n  selectable?: boolean\n  emptyState?: React.ReactNode\n  loading?: boolean\n  className?: string\n  ariaLabel?: string\n}\n\nexport function MobileResponsiveTable({\n  data,\n  columns,\n  searchable = true,\n  searchPlaceholder = 'Search...',\n  onRowClick,\n  onRowSelect,\n  selectable = false,\n  emptyState,\n  loading = false,\n  className,\n  ariaLabel = 'Data table'\n}: MobileResponsiveTableProps) {\n  const [searchQuery, setSearchQuery] = useState('')\n  const [sortConfig, setSortConfig] = useState<{\n    key: string\n    direction: 'asc' | 'desc'\n  } | null>(null)\n  const [selectedRows, setSelectedRows] = useState<any[]>([])\n  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set())\n\n  // Filter data based on search query\n  const filteredData = React.useMemo(() => {\n    if (!searchQuery) return data\n\n    return data.filter((row) =>\n      Object.values(row).some((value) =>\n        String(value).toLowerCase().includes(searchQuery.toLowerCase())\n      )\n    )\n  }, [data, searchQuery])\n\n  // Sort data\n  const sortedData = React.useMemo(() => {\n    if (!sortConfig) return filteredData\n\n    return [...filteredData].sort((a, b) => {\n      const aValue = a[sortConfig.key]\n      const bValue = b[sortConfig.key]\n\n      if (aValue < bValue) {\n        return sortConfig.direction === 'asc' ? -1 : 1\n      }\n      if (aValue > bValue) {\n        return sortConfig.direction === 'asc' ? 1 : -1\n      }\n      return 0\n    })\n  }, [filteredData, sortConfig])\n\n  const handleSort = (key: string) => {\n    setSortConfig((prev) => {\n      if (prev?.key === key) {\n        return {\n          key,\n          direction: prev.direction === 'asc' ? 'desc' : 'asc'\n        }\n      }\n      return { key, direction: 'asc' }\n    })\n  }\n\n  const handleRowSelect = (row: any, isSelected: boolean) => {\n    const newSelection = isSelected\n      ? [...selectedRows, row]\n      : selectedRows.filter((r) => r.id !== row.id)\n\n    setSelectedRows(newSelection)\n    onRowSelect?.(newSelection)\n  }\n\n  const handleSelectAll = (isSelected: boolean) => {\n    const newSelection = isSelected ? sortedData : []\n    setSelectedRows(newSelection)\n    onRowSelect?.(newSelection)\n  }\n\n  const toggleRowExpansion = (rowId: string) => {\n    const newExpanded = new Set(expandedRows)\n    if (newExpanded.has(rowId)) {\n      newExpanded.delete(rowId)\n    } else {\n      newExpanded.add(rowId)\n    }\n    setExpandedRows(newExpanded)\n  }\n\n  const visibleColumns = columns.filter(col => !col.hideOnMobile)\n  const hiddenColumns = columns.filter(col => col.hideOnMobile)\n\n  if (loading) {\n    return (\n      <div className={cn('space-y-4', className)}>\n        {searchable && (\n          <div className=\"h-10 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n        )}\n        {Array.from({ length: 5 }).map((_, i) => (\n          <div key={i} className=\"h-16 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n        ))}\n      </div>\n    )\n  }\n\n  return (\n    <div className={cn('space-y-4', className)}>\n      {/* Search and Controls */}\n      {searchable && (\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          <Input\n            placeholder={searchPlaceholder}\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            aria-label=\"Search table data\"\n          />\n        </div>\n      )}\n\n      {/* Desktop Table View */}\n      <div className=\"hidden lg:block\">\n        <div className=\"overflow-x-auto\">\n          <table\n            className=\"w-full border-collapse bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\"\n            role=\"table\"\n            aria-label={ariaLabel}\n          >\n            <thead>\n              <tr role=\"row\" className=\"border-b border-gray-200 dark:border-gray-700\">\n                {selectable && (\n                  <th className=\"w-12 p-3\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedRows.length === sortedData.length && sortedData.length > 0}\n                      onChange={(e) => handleSelectAll(e.target.checked)}\n                      aria-label=\"Select all rows\"\n                      className=\"rounded focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </th>\n                )}\n                {columns.map((column) => (\n                  <th\n                    key={column.key}\n                    className=\"text-left p-3 font-medium text-gray-900 dark:text-white\"\n                    role=\"columnheader\"\n                    aria-sort={\n                      sortConfig?.key === column.key\n                        ? sortConfig.direction === 'asc'\n                          ? 'ascending'\n                          : 'descending'\n                        : 'none'\n                    }\n                  >\n                    {column.sortable ? (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSort(column.key)}\n                        className=\"-ml-3 h-auto p-3 font-medium\"\n                        aria-label={`Sort by ${column.label}`}\n                      >\n                        {column.label}\n                        {sortConfig?.key === column.key ? (\n                          sortConfig.direction === 'asc' ? (\n                            <SortAsc className=\"ml-2 w-4 h-4\" aria-hidden=\"true\" />\n                          ) : (\n                            <SortDesc className=\"ml-2 w-4 h-4\" aria-hidden=\"true\" />\n                          )\n                        ) : (\n                          <div className=\"ml-2 w-4 h-4\" aria-hidden=\"true\" />\n                        )}\n                      </Button>\n                    ) : (\n                      column.label\n                    )}\n                  </th>\n                ))}\n                <th className=\"w-12 p-3\">\n                  <ScreenReaderOnly>Actions</ScreenReaderOnly>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {sortedData.length === 0 ? (\n                <tr>\n                  <td colSpan={columns.length + (selectable ? 2 : 1)} className=\"p-8 text-center\">\n                    {emptyState || (\n                      <div className=\"text-gray-500 dark:text-gray-400\">\n                        No data available\n                      </div>\n                    )}\n                  </td>\n                </tr>\n              ) : (\n                sortedData.map((row, index) => (\n                  <tr\n                    key={row.id || index}\n                    role=\"row\"\n                    className={cn(\n                      'border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors',\n                      onRowClick && 'cursor-pointer',\n                      selectedRows.some(r => r.id === row.id) && 'bg-blue-50 dark:bg-blue-900/20'\n                    )}\n                    onClick={() => onRowClick?.(row)}\n                  >\n                    {selectable && (\n                      <td className=\"p-3\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedRows.some(r => r.id === row.id)}\n                          onChange={(e) => handleRowSelect(row, e.target.checked)}\n                          onClick={(e) => e.stopPropagation()}\n                          aria-label={`Select row ${index + 1}`}\n                          className=\"rounded focus:ring-2 focus:ring-blue-500\"\n                        />\n                      </td>\n                    )}\n                    {columns.map((column) => (\n                      <td key={column.key} className=\"p-3\" role=\"cell\">\n                        {column.render ? column.render(row[column.key], row) : row[column.key]}\n                      </td>\n                    ))}\n                    <td className=\"p-3\">\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-8 w-8 p-0\"\n                            aria-label={`Actions for row ${index + 1}`}\n                          >\n                            <MoreHorizontal className=\"w-4 h-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => onRowClick?.(row)}>\n                            <Eye className=\"w-4 h-4 mr-2\" />\n                            View Details\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Mobile Card View */}\n      <div className=\"lg:hidden space-y-4\">\n        {sortedData.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              {emptyState || (\n                <div className=\"text-gray-500 dark:text-gray-400\">\n                  No data available\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          sortedData.map((row, index) => (\n            <motion.div\n              key={row.id || index}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.05 }}\n            >\n              <Card\n                className={cn(\n                  'cursor-pointer transition-colors hover:bg-gray-50 dark:hover:bg-gray-800/50',\n                  selectedRows.some(r => r.id === row.id) && 'ring-2 ring-blue-500'\n                )}\n                onClick={() => onRowClick?.(row)}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex-1 space-y-1\">\n                      {visibleColumns.slice(0, 2).map((column) => (\n                        <div key={column.key}>\n                          {column.key === visibleColumns[0].key ? (\n                            <h3 className=\"font-medium text-gray-900 dark:text-white\">\n                              {column.render ? column.render(row[column.key], row) : row[column.key]}\n                            </h3>\n                          ) : (\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              {column.render ? column.render(row[column.key], row) : row[column.key]}\n                            </p>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      {selectable && (\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedRows.some(r => r.id === row.id)}\n                          onChange={(e) => handleRowSelect(row, e.target.checked)}\n                          onClick={(e) => e.stopPropagation()}\n                          aria-label={`Select ${row[visibleColumns[0].key]}`}\n                          className=\"rounded focus:ring-2 focus:ring-blue-500\"\n                        />\n                      )}\n\n                      {hiddenColumns.length > 0 && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation()\n                            toggleRowExpansion(row.id || index.toString())\n                          }}\n                          aria-label={`${expandedRows.has(row.id || index.toString()) ? 'Collapse' : 'Expand'} details for ${row[visibleColumns[0].key]}`}\n                          aria-expanded={expandedRows.has(row.id || index.toString())}\n                        >\n                          {expandedRows.has(row.id || index.toString()) ? (\n                            <ChevronUp className=\"w-4 h-4\" />\n                          ) : (\n                            <ChevronDown className=\"w-4 h-4\" />\n                          )}\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Always visible fields */}\n                  {visibleColumns.slice(2).map((column) => (\n                    <div key={column.key} className=\"flex justify-between items-center text-sm mb-2\">\n                      <span className=\"text-gray-600 dark:text-gray-400\">\n                        {column.mobileLabel || column.label}:\n                      </span>\n                      <span className=\"font-medium\">\n                        {column.render ? column.render(row[column.key], row) : row[column.key]}\n                      </span>\n                    </div>\n                  ))}\n\n                  {/* Expandable hidden fields */}\n                  <AnimatePresence>\n                    {expandedRows.has(row.id || index.toString()) && hiddenColumns.length > 0 && (\n                      <motion.div\n                        initial={{ opacity: 0, height: 0 }}\n                        animate={{ opacity: 1, height: 'auto' }}\n                        exit={{ opacity: 0, height: 0 }}\n                        className=\"border-t border-gray-200 dark:border-gray-700 pt-3 mt-3 space-y-2\"\n                      >\n                        {hiddenColumns.map((column) => (\n                          <div key={column.key} className=\"flex justify-between items-center text-sm\">\n                            <span className=\"text-gray-600 dark:text-gray-400\">\n                              {column.mobileLabel || column.label}:\n                            </span>\n                            <span className=\"font-medium\">\n                              {column.render ? column.render(row[column.key], row) : row[column.key]}\n                            </span>\n                          </div>\n                        ))}\n                      </motion.div>\n                    )}\n                  </AnimatePresence>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))\n        )}\n      </div>\n\n      {/* Selection Summary */}\n      {selectable && selectedRows.length > 0 && (\n        <div className=\"flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n          <span className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">\n            {selectedRows.length} item{selectedRows.length !== 1 ? 's' : ''} selected\n          </span>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => {\n              setSelectedRows([])\n              onRowSelect?.([])\n            }}\n          >\n            Clear Selection\n          </Button>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default MobileResponsiveTable