'use client'

import React, { createContext, useContext, useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import {\n  Menu,\n  X,\n  ChevronLeft,\n  Home,\n  Users,\n  FileText,\n  DollarSign,\n  Settings,\n  Bell,\n  Search,\n  Moon,\n  Sun,\n  Monitor,\n} from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { Badge } from '@/components/ui/badge'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { ScreenReaderOnly, Landmark } from '@/components/ui/screen-reader-only'\nimport { AccessibleButton } from '@/components/ui/accessible-button'\nimport { cn } from '@/lib/utils'\nimport { useTheme } from 'next-themes'\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\n\ninterface ResponsiveLayoutContextType {\n  isMobile: boolean\n  isTablet: boolean\n  isDesktop: boolean\n  sidebarOpen: boolean\n  setSidebarOpen: (open: boolean) => void\n  breakpoint: 'sm' | 'md' | 'lg' | 'xl' | '2xl'\n}\n\nconst ResponsiveLayoutContext = createContext<ResponsiveLayoutContextType | null>(null)\n\nexport function useResponsiveLayout() {\n  const context = useContext(ResponsiveLayoutContext)\n  if (!context) {\n    throw new Error('useResponsiveLayout must be used within ResponsiveLayoutProvider')\n  }\n  return context\n}\n\ninterface NavigationItem {\n  id: string\n  label: string\n  href: string\n  icon: React.ComponentType<{ className?: string }>\n  badge?: number\n  children?: NavigationItem[]\n}\n\ninterface ResponsiveLayoutProps {\n  children: React.ReactNode\n  navigation: NavigationItem[]\n  user?: {\n    name: string\n    email: string\n    avatar?: string\n  }\n  notifications?: number\n  onSearch?: (query: string) => void\n  className?: string\n}\n\nexport function ResponsiveLayoutProvider({ children }: { children: React.ReactNode }) {\n  const [mounted, setMounted] = useState(false)\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [breakpoint, setBreakpoint] = useState<'sm' | 'md' | 'lg' | 'xl' | '2xl'>('lg')\n\n  useEffect(() => {\n    setMounted(true)\n\n    const updateBreakpoint = () => {\n      const width = window.innerWidth\n      if (width < 640) setBreakpoint('sm')\n      else if (width < 768) setBreakpoint('md')\n      else if (width < 1024) setBreakpoint('lg')\n      else if (width < 1280) setBreakpoint('xl')\n      else setBreakpoint('2xl')\n    }\n\n    updateBreakpoint()\n    window.addEventListener('resize', updateBreakpoint)\n    return () => window.removeEventListener('resize', updateBreakpoint)\n  }, [])\n\n  const isMobile = breakpoint === 'sm'\n  const isTablet = breakpoint === 'md'\n  const isDesktop = breakpoint === 'lg' || breakpoint === 'xl' || breakpoint === '2xl'\n\n  if (!mounted) {\n    return null\n  }\n\n  const value = {\n    isMobile,\n    isTablet,\n    isDesktop,\n    sidebarOpen,\n    setSidebarOpen,\n    breakpoint\n  }\n\n  return (\n    <ResponsiveLayoutContext.Provider value={value}>\n      {children}\n    </ResponsiveLayoutContext.Provider>\n  )\n}\n\nexport function ResponsiveLayout({\n  children,\n  navigation,\n  user,\n  notifications = 0,\n  onSearch,\n  className\n}: ResponsiveLayoutProps) {\n  const { isMobile, isDesktop, sidebarOpen, setSidebarOpen } = useResponsiveLayout()\n  const { theme, setTheme } = useTheme()\n  const pathname = usePathname()\n  const [searchQuery, setSearchQuery] = useState('')\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault()\n    onSearch?.(searchQuery)\n  }\n\n  const closeSidebar = () => setSidebarOpen(false)\n\n  // Close sidebar on route change for mobile\n  useEffect(() => {\n    if (isMobile) {\n      setSidebarOpen(false)\n    }\n  }, [pathname, isMobile, setSidebarOpen])\n\n  const renderNavigationItem = (item: NavigationItem, depth = 0) => {\n    const isActive = pathname === item.href\n    const Icon = item.icon\n\n    return (\n      <li key={item.id} role=\"none\">\n        <Link\n          href={item.href}\n          onClick={closeSidebar}\n          className={cn(\n            'group flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors',\n            'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-100 dark:focus:ring-offset-gray-900',\n            depth > 0 && 'ml-6',\n            isActive\n              ? 'bg-blue-100 text-blue-900 dark:bg-blue-900 dark:text-blue-100'\n              : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-gray-900 dark:hover:text-white'\n          )}\n          role=\"menuitem\"\n          aria-current={isActive ? 'page' : undefined}\n        >\n          <Icon\n            className={cn(\n              'mr-3 h-5 w-5 flex-shrink-0',\n              isActive\n                ? 'text-blue-500 dark:text-blue-400'\n                : 'text-gray-400 group-hover:text-gray-500 dark:group-hover:text-gray-300'\n            )}\n            aria-hidden=\"true\"\n          />\n          <span className=\"flex-1\">{item.label}</span>\n          {item.badge && item.badge > 0 && (\n            <Badge\n              variant=\"destructive\"\n              className=\"ml-2 text-xs\"\n              aria-label={`${item.badge} notifications`}\n            >\n              {item.badge}\n            </Badge>\n          )}\n        </Link>\n        {item.children && (\n          <ul className=\"mt-1 space-y-1\" role=\"menu\" aria-label={`${item.label} submenu`}>\n            {item.children.map(child => renderNavigationItem(child, depth + 1))}\n          </ul>\n        )}\n      </li>\n    )\n  }\n\n  return (\n    <div className={cn('min-h-screen bg-gray-50 dark:bg-gray-900', className)}>\n      {/* Mobile Sidebar Overlay */}\n      <AnimatePresence>\n        {isMobile && sidebarOpen && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 z-40 bg-black bg-opacity-50 lg:hidden\"\n            onClick={closeSidebar}\n            aria-hidden=\"true\"\n          />\n        )}\n      </AnimatePresence>\n\n      {/* Sidebar */}\n      <AnimatePresence mode=\"wait\">\n        {(isDesktop || sidebarOpen) && (\n          <motion.div\n            initial={isMobile ? { x: '-100%' } : { x: 0 }}\n            animate={{ x: 0 }}\n            exit={isMobile ? { x: '-100%' } : { x: 0 }}\n            transition={{ type: 'spring', damping: 25, stiffness: 300 }}\n            className={cn(\n              'fixed inset-y-0 left-0 z-50 w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700',\n              isDesktop ? 'lg:static lg:inset-auto' : 'lg:hidden'\n            )}\n          >\n            <Landmark role=\"navigation\" ariaLabel=\"Main navigation\">\n              <div className=\"flex h-full flex-col\">\n                {/* Logo and Close Button */}\n                <div className=\"flex h-16 items-center justify-between px-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n                      <Home className=\"w-5 h-5 text-white\" aria-hidden=\"true\" />\n                    </div>\n                    <span className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                      AdvisorOS\n                    </span>\n                  </div>\n                  {isMobile && (\n                    <AccessibleButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={closeSidebar}\n                      ariaLabel=\"Close navigation menu\"\n                    >\n                      <X className=\"w-5 h-5\" aria-hidden=\"true\" />\n                    </AccessibleButton>\n                  )}\n                </div>\n\n                {/* Navigation */}\n                <nav className=\"flex-1 space-y-1 px-2 py-4 overflow-y-auto\" role=\"menubar\">\n                  <ScreenReaderOnly>\n                    <h2>Navigation Menu</h2>\n                  </ScreenReaderOnly>\n                  <ul className=\"space-y-1\" role=\"menu\">\n                    {navigation.map(item => renderNavigationItem(item))}\n                  </ul>\n                </nav>\n\n                {/* User Profile */}\n                {user && (\n                  <div className=\"border-t border-gray-200 dark:border-gray-700 p-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarImage src={user.avatar} alt={`${user.name}'s avatar`} />\n                        <AvatarFallback>\n                          {user.name.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-gray-900 dark:text-white truncate\">\n                          {user.name}\n                        </p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400 truncate\">\n                          {user.email}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </Landmark>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Main Content */}\n      <div className={cn('flex flex-col', isDesktop && 'lg:pl-64')}>\n        {/* Top Navigation */}\n        <Landmark role=\"banner\">\n          <header className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                {/* Mobile Menu Button */}\n                <AccessibleButton\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setSidebarOpen(true)}\n                  className=\"lg:hidden\"\n                  ariaLabel=\"Open navigation menu\"\n                  ariaExpanded={sidebarOpen}\n                  ariaControls=\"sidebar-navigation\"\n                >\n                  <Menu className=\"w-5 h-5\" aria-hidden=\"true\" />\n                </AccessibleButton>\n\n                {/* Search */}\n                {onSearch && (\n                  <form onSubmit={handleSearch} className=\"hidden sm:block\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" aria-hidden=\"true\" />\n                      <Input\n                        type=\"search\"\n                        placeholder=\"Search...\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        className=\"pl-10 w-64\"\n                        aria-label=\"Search\"\n                      />\n                    </div>\n                  </form>\n                )}\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                {/* Theme Toggle */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <AccessibleButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      ariaLabel=\"Change theme\"\n                    >\n                      {theme === 'dark' ? (\n                        <Moon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                      ) : theme === 'light' ? (\n                        <Sun className=\"w-5 h-5\" aria-hidden=\"true\" />\n                      ) : (\n                        <Monitor className=\"w-5 h-5\" aria-hidden=\"true\" />\n                      )}\n                    </AccessibleButton>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuLabel>Theme</DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={() => setTheme('light')}>\n                      <Sun className=\"w-4 h-4 mr-2\" aria-hidden=\"true\" />\n                      Light\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => setTheme('dark')}>\n                      <Moon className=\"w-4 h-4 mr-2\" aria-hidden=\"true\" />\n                      Dark\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => setTheme('system')}>\n                      <Monitor className=\"w-4 h-4 mr-2\" aria-hidden=\"true\" />\n                      System\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n\n                {/* Notifications */}\n                <AccessibleButton\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"relative\"\n                  ariaLabel={`Notifications${notifications > 0 ? ` (${notifications} new)` : ''}`}\n                >\n                  <Bell className=\"w-5 h-5\" aria-hidden=\"true\" />\n                  {notifications > 0 && (\n                    <Badge\n                      variant=\"destructive\"\n                      className=\"absolute -top-2 -right-2 text-xs h-5 w-5 p-0 flex items-center justify-center\"\n                      aria-hidden=\"true\"\n                    >\n                      {notifications > 99 ? '99+' : notifications}\n                    </Badge>\n                  )}\n                </AccessibleButton>\n\n                {/* User Menu */}\n                {user && (\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <AccessibleButton\n                        variant=\"ghost\"\n                        className=\"flex items-center space-x-2\"\n                        ariaLabel={`User menu for ${user.name}`}\n                      >\n                        <Avatar className=\"w-8 h-8\">\n                          <AvatarImage src={user.avatar} alt={`${user.name}'s avatar`} />\n                          <AvatarFallback>\n                            {user.name.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        <ScreenReaderOnly>\n                          {user.name}\n                        </ScreenReaderOnly>\n                      </AccessibleButton>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\" className=\"w-56\">\n                      <DropdownMenuLabel>\n                        <div>\n                          <p className=\"font-medium\">{user.name}</p>\n                          <p className=\"text-sm text-gray-500 dark:text-gray-400\">{user.email}</p>\n                        </div>\n                      </DropdownMenuLabel>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem>\n                        <Settings className=\"w-4 h-4 mr-2\" aria-hidden=\"true\" />\n                        Settings\n                      </DropdownMenuItem>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem>\n                        Sign Out\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                )}\n              </div>\n            </div>\n          </header>\n        </Landmark>\n\n        {/* Page Content */}\n        <Landmark role=\"main\" className=\"flex-1 p-4 lg:p-6\">\n          {children}\n        </Landmark>\n      </div>\n\n      {/* Skip to Content Link */}\n      <a\n        href=\"#main-content\"\n        className=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 text-white px-4 py-2 rounded-md z-50\"\n      >\n        Skip to main content\n      </a>\n    </div>\n  )\n}\n\nexport default ResponsiveLayout