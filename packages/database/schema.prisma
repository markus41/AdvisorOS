// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id               String    @id @default(cuid())
  name             String
  subdomain        String    @unique
  subscriptionTier String    @default("trial")
  stripeCustomerId String?
  // Enhanced organization settings
  settings         Json?     // Organization-wide settings
  features         Json?     // Enabled features
  limits           Json?     // Usage limits
  timezone         String    @default("UTC")
  locale           String    @default("en-US")
  // Security settings
  passwordPolicy   Json?     // Password requirements
  sessionTimeout   Int       @default(3600) // Session timeout in seconds
  mfaRequired      Boolean   @default(false)
  ipWhitelist      String[]  // Allowed IP addresses
  // Data retention
  dataRetentionDays Int      @default(2555) // 7 years default
  // Status tracking
  isActive         Boolean   @default(true)
  deletedAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  createdBy        String?
  updatedBy        String?

  // Relations
  users                    User[]
  clients                  Client[]
  documents                Document[]
  quickbooksToken          QuickBooksToken?
  quickbooksSyncs          QuickBooksSync[]
  quickbooksWebhookEvents  QuickBooksWebhookEvent[]
  engagements              Engagement[]
  workflows                Workflow[]
  tasks                    Task[]
  invoices                 Invoice[]
  reports                  Report[]
  reportTemplates          ReportTemplate[]
  reportSchedules          ReportSchedule[]
  auditLogs                AuditLog[]
  authAttempts             AuthAttempt[]
  authEvents               AuthEvent[]
  teamMembers              TeamMember[]
  subscription             Subscription?
  workflowTemplates        WorkflowTemplate[]
  workflowExecutions       WorkflowExecution[]
  taskExecutions           TaskExecution[]
  taskQueueItems           TaskQueueItem[]
  apiKeys                  ApiKey[]
  userSessions             UserSession[]

  @@index([subdomain])
  @@index([isActive])
  @@index([subscriptionTier])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("organizations")
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  name           String
  password       String // Hashed password
  role           String // "owner", "admin", "cpa", "staff"
  isActive       Boolean      @default(true)
  lastLoginAt    DateTime?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      String?
  updatedBy      String?

  // Relations
  uploadedDocuments   Document[]   @relation("DocumentUploader")
  assignedTasks       Task[]       @relation("TaskAssignee")
  createdTasks        Task[]       @relation("TaskCreator")
  createdEngagements  Engagement[] @relation("EngagementCreator")
  assignedEngagements Engagement[] @relation("EngagementAssignee")
  createdInvoices     Invoice[]    @relation("InvoiceCreator")
  createdReports      Report[]     @relation("ReportCreator")
  createdTemplates    ReportTemplate[] @relation("TemplateCreator")
  createdSchedules    ReportSchedule[] @relation("ScheduleCreator")
  createdAuditLogs    AuditLog[]   @relation("AuditLogCreator")
  notes               Note[]
  authAttempts        AuthAttempt[]
  authEvents          AuthEvent[]
  teamMember          TeamMember?
  documentAnnotations DocumentAnnotation[]
  documentComments    DocumentComment[]
  documentShares      DocumentShare[]
  assignedWorkflowExecutions WorkflowExecution[] @relation("WorkflowExecutionAssignee")
  createdWorkflowExecutions WorkflowExecution[] @relation("WorkflowExecutionCreator")
  assignedTaskExecutions TaskExecution[] @relation("TaskExecutionAssignee")

  @@index([organizationId])
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([lastLoginAt])
  @@map("users")
}

model Client {
  id                  String       @id @default(cuid())
  businessName        String
  legalName           String?
  taxId               String?
  quickbooksId        String?
  organizationId      String
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  primaryContactEmail String
  primaryContactName  String
  primaryContactPhone String?
  businessAddress     String?
  mailingAddress      String?
  businessType        String? // "LLC", "Corporation", "Partnership", "Sole Proprietorship"
  industry            String?
  website             String?
  status              String       @default("active") // "active", "inactive", "prospect"
  riskLevel           String       @default("medium") // "low", "medium", "high"
  annualRevenue       Decimal?
  financialData       Json? // Store QuickBooks sync data
  customFields        Json? // Additional client-specific data
  deletedAt           DateTime?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  createdBy           String?
  updatedBy           String?

  // Relations
  documents   Document[]
  notes       Note[]
  engagements Engagement[]
  invoices    Invoice[]
  workflowExecutions WorkflowExecution[]

  @@index([organizationId])
  @@index([status])
  @@index([businessName])
  @@index([businessType])
  @@index([industry])
  @@index([riskLevel])
  @@index([primaryContactEmail])
  @@map("clients")
}

model Document {
  id               String       @id @default(cuid())
  fileName         String
  fileUrl          String
  thumbnailUrl     String?
  fileType         String
  mimeType         String?
  fileSize         BigInt?
  category         String // "tax_return", "financial_statement", "receipt", "invoice", "bank_statement", "w2", "1099", etc.
  subcategory      String?
  year             Int?
  quarter          Int?
  version          Int          @default(1)
  isLatestVersion  Boolean      @default(true)
  parentDocumentId String?
  parentDocument   Document?    @relation("DocumentVersions", fields: [parentDocumentId], references: [id])
  documentVersions Document[]   @relation("DocumentVersions")
  tags             String[] // Array of tags for categorization
  description      String?
  clientId         String
  client           Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploadedBy       String
  uploader         User         @relation("DocumentUploader", fields: [uploadedBy], references: [id])

  // OCR and Processing
  ocrStatus        String       @default("pending") // "pending", "processing", "completed", "failed", "manual_review"
  ocrConfidence    Float?       // Overall confidence score 0-1
  ocrProcessedAt   DateTime?
  extractedData    Json? // Structured OCR results
  rawOcrData       Json? // Raw OCR output
  ocrModel         String?      // Model used for OCR
  needsReview      Boolean      @default(false)
  reviewedAt       DateTime?
  reviewedBy       String?

  // Security and Compliance
  metadata         Json? // Additional metadata
  checksum         String? // File integrity verification
  isConfidential   Boolean      @default(false)
  accessLevel      String       @default("organization") // "public", "organization", "client", "restricted"
  encryptionKey    String? // For encrypted documents
  virusScanned     Boolean      @default(false)
  virusScanDate    DateTime?
  virusScanResult  String? // "clean", "infected", "quarantined"

  // Retention and Lifecycle
  retentionDate    DateTime? // When document should be deleted
  archiveDate      DateTime? // When to archive
  isArchived       Boolean      @default(false)

  // Timestamps
  deletedAt        DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  createdBy        String?
  updatedBy        String?

  // Relations
  annotations      DocumentAnnotation[]
  comments         DocumentComment[]
  shares           DocumentShare[]

  @@index([organizationId])
  @@index([clientId])
  @@index([category])
  @@index([subcategory])
  @@index([year])
  @@index([quarter])
  @@index([isLatestVersion])
  @@index([uploadedBy])
  @@index([fileType])
  @@index([isConfidential])
  @@index([ocrStatus])
  @@index([needsReview])
  @@index([createdAt])
  @@index([tags])
  @@map("documents")
}

model QuickBooksToken {
  id             String       @id @default(cuid())
  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  accessToken    String       @db.Text
  refreshToken   String       @db.Text
  realmId        String
  expiresAt      DateTime
  lastSyncAt     DateTime?
  isActive       Boolean      @default(true)
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      String?
  updatedBy      String?

  @@map("quickbooks_tokens")
}

model Note {
  id           String      @id @default(cuid())
  title        String?
  content      String      @db.Text
  noteType     String      @default("general") // "general", "meeting", "reminder", "follow_up"
  priority     String      @default("normal") // "low", "normal", "high", "urgent"
  isPrivate    Boolean     @default(false)
  tags         String[] // Array of tags
  clientId     String?
  client       Client?     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  engagementId String?
  engagement   Engagement? @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  taskId       String?
  task         Task?       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId     String
  author       User        @relation(fields: [authorId], references: [id])
  reminderDate DateTime?
  deletedAt    DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    String?
  updatedBy    String?

  @@index([clientId])
  @@index([engagementId])
  @@index([taskId])
  @@index([authorId])
  @@map("notes")
}

model Engagement {
  id             String       @id @default(cuid())
  name           String
  description    String?      @db.Text
  type           String // "tax_preparation", "bookkeeping", "advisory", "cfo_services", "audit", "review"
  status         String       @default("planning") // "planning", "in_progress", "review", "completed", "on_hold", "cancelled"
  priority       String       @default("normal") // "low", "normal", "high", "urgent"
  startDate      DateTime?
  dueDate        DateTime?
  completedDate  DateTime?
  estimatedHours Decimal?
  actualHours    Decimal?
  hourlyRate     Decimal?
  fixedFee       Decimal?
  clientId       String
  client         Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedToId   String?
  assignedTo     User?        @relation("EngagementAssignee", fields: [assignedToId], references: [id])
  createdById    String
  createdBy      User         @relation("EngagementCreator", fields: [createdById], references: [id])
  workflowId     String?
  workflow       Workflow?    @relation(fields: [workflowId], references: [id])
  year           Int?
  quarter        Int?
  customFields   Json? // Additional engagement-specific data
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  updatedBy      String?

  // Relations
  tasks    Task[]
  notes    Note[]
  invoices Invoice[]
  reports  Report[]
  workflowExecutions WorkflowExecution[]

  @@index([organizationId])
  @@index([clientId])
  @@index([assignedToId])
  @@index([status])
  @@index([type])
  @@index([dueDate])
  @@map("engagements")
}

model Workflow {
  id             String       @id @default(cuid())
  name           String
  description    String?      @db.Text
  type           String // "tax_preparation", "bookkeeping", "onboarding", "year_end", "custom"
  isTemplate     Boolean      @default(true)
  isActive       Boolean      @default(true)
  version        Int          @default(1)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  steps          Json // Workflow steps configuration
  settings       Json? // Workflow settings and rules
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      String?
  updatedBy      String?

  // Relations
  engagements        Engagement[]
  tasks              Task[]
  workflowExecutions WorkflowExecution[]

  @@index([organizationId])
  @@index([type])
  @@index([isActive])
  @@map("workflows")
}

model Task {
  id             String       @id @default(cuid())
  title          String
  description    String?      @db.Text
  status         String       @default("pending") // "pending", "in_progress", "review", "completed", "cancelled"
  priority       String       @default("normal") // "low", "normal", "high", "urgent"
  taskType       String // "document_review", "data_entry", "client_meeting", "preparation", "review", "custom"
  estimatedHours Decimal?
  actualHours    Decimal?
  startDate      DateTime?
  dueDate        DateTime?
  completedDate  DateTime?
  assignedToId   String?
  assignedTo     User?        @relation("TaskAssignee", fields: [assignedToId], references: [id])
  createdById    String
  createdBy      User         @relation("TaskCreator", fields: [createdById], references: [id])
  engagementId   String?
  engagement     Engagement?  @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  workflowId     String?
  workflow       Workflow?    @relation(fields: [workflowId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parentTaskId   String?
  parentTask     Task?        @relation("TaskDependencies", fields: [parentTaskId], references: [id])
  subTasks       Task[]       @relation("TaskDependencies")
  dependencies   Json? // Task dependency rules
  checklist      Json? // Task checklist items
  attachments    Json? // File attachments metadata
  customFields   Json? // Additional task-specific data
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  updatedBy      String?

  // Relations
  notes Note[]

  @@index([organizationId])
  @@index([assignedToId])
  @@index([engagementId])
  @@index([workflowId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@map("tasks")
}

model Invoice {
  id             String       @id @default(cuid())
  invoiceNumber  String       @unique
  title          String?
  description    String?      @db.Text
  status         String       @default("draft") // "draft", "sent", "viewed", "partial", "paid", "overdue", "cancelled"
  invoiceDate    DateTime     @default(now())
  dueDate        DateTime
  subtotal       Decimal      @db.Decimal(10, 2)
  taxAmount      Decimal      @default(0) @db.Decimal(10, 2)
  discountAmount Decimal      @default(0) @db.Decimal(10, 2)
  totalAmount    Decimal      @db.Decimal(10, 2)
  paidAmount     Decimal      @default(0) @db.Decimal(10, 2)
  balanceAmount  Decimal      @db.Decimal(10, 2)
  currency       String       @default("USD")
  paymentTerms   String? // "net_30", "net_15", "due_on_receipt", etc.
  clientId       String
  client         Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  engagementId   String?
  engagement     Engagement?  @relation(fields: [engagementId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdById    String
  createdBy      User         @relation("InvoiceCreator", fields: [createdById], references: [id])
  lineItems      Json // Invoice line items
  paymentHistory Json? // Payment transaction history
  emailHistory   Json? // Email send history
  notes          String?      @db.Text
  customFields   Json? // Additional invoice-specific data
  sentAt         DateTime?
  viewedAt       DateTime?
  paidAt         DateTime?
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  updatedBy      String?

  @@index([organizationId])
  @@index([clientId])
  @@index([engagementId])
  @@index([status])
  @@index([dueDate])
  @@index([invoiceNumber])
  @@map("invoices")
}

model Report {
  id             String       @id @default(cuid())
  name           String
  description    String?      @db.Text
  reportType     String // "financial_statement", "tax_summary", "engagement_summary", "time_tracking", "custom"
  format         String // "pdf", "excel", "csv", "html", "pptx"
  status         String       @default("generating") // "generating", "completed", "failed", "archived"
  fileUrl        String?
  fileSize       BigInt?
  parameters     Json? // Report generation parameters
  data           Json? // Report data/results
  metadata       Json? // Additional report metadata
  templateId     String?
  template       ReportTemplate? @relation(fields: [templateId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  engagementId   String?
  engagement     Engagement?  @relation(fields: [engagementId], references: [id])
  clientIds      String[] // Multiple clients support
  createdById    String
  createdBy      User         @relation("ReportCreator", fields: [createdById], references: [id])
  generatedAt    DateTime?
  expiresAt      DateTime?
  downloadCount  Int          @default(0)
  isScheduled    Boolean      @default(false)
  scheduleConfig Json? // Cron configuration for scheduled reports
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  updatedBy      String?

  @@index([organizationId])
  @@index([engagementId])
  @@index([templateId])
  @@index([reportType])
  @@index([status])
  @@index([createdById])
  @@index([isScheduled])
  @@map("reports")
}

model ReportTemplate {
  id             String       @id @default(cuid())
  name           String
  description    String?      @db.Text
  category       String // "monthly_financial", "tax_preparation", "advisory", "custom"
  type           String // "financial_package", "tax_organizer", "business_scorecard", etc.
  version        String       @default("1.0.0")
  isActive       Boolean      @default(true)
  isSystem       Boolean      @default(false) // System templates vs custom templates
  layout         Json // Template layout configuration
  sections       Json // Report sections and their configuration
  dataRequirements Json // Required data sources and fields
  chartConfigs   Json? // Chart configurations
  brandingOptions Json? // Branding customization options
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdById    String?
  createdBy      User?        @relation("TemplateCreator", fields: [createdById], references: [id])
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  reports        Report[]
  schedules      ReportSchedule[]

  @@index([organizationId])
  @@index([category])
  @@index([type])
  @@index([isActive])
  @@index([isSystem])
  @@map("report_templates")
}

model ReportSchedule {
  id             String       @id @default(cuid())
  name           String
  description    String?      @db.Text
  isActive       Boolean      @default(true)
  cronExpression String // Cron expression for scheduling
  reportType     String
  templateId     String?
  template       ReportTemplate? @relation(fields: [templateId], references: [id])
  format         String       @default("pdf")
  parameters     Json // Report parameters
  recipients     Json // Email recipients configuration
  clientIds      String[] // Target clients
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdById    String
  createdBy      User         @relation("ScheduleCreator", fields: [createdById], references: [id])
  lastRunAt      DateTime?
  nextRunAt      DateTime?
  errorCount     Int          @default(0)
  lastError      String?      @db.Text
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([isActive])
  @@index([nextRunAt])
  @@index([templateId])
  @@map("report_schedules")
}

model AuditLog {
  id             String       @id @default(cuid())
  action         String // "create", "update", "delete", "login", "logout", "export", "import", etc.
  entityType     String // "user", "client", "document", "engagement", "invoice", etc.
  entityId       String?
  oldValues      Json? // Previous state for updates
  newValues      Json? // New state for updates
  metadata       Json? // Additional context data
  ipAddress      String?
  userAgent      String?      @db.Text
  sessionId      String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?        @relation("AuditLogCreator", fields: [userId], references: [id])
  createdAt      DateTime     @default(now())

  @@index([organizationId])
  @@index([userId])
  @@index([entityType])
  @@index([entityId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model AuthAttempt {
  id             String       @id @default(cuid())
  email          String
  success        Boolean
  failureReason  String?
  ipAddress      String?
  userAgent      String?      @db.Text
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?        @relation(fields: [userId], references: [id])
  sessionId      String?
  metadata       Json?        // Additional auth attempt data
  createdAt      DateTime     @default(now())

  @@index([email])
  @@index([success])
  @@index([ipAddress])
  @@index([createdAt])
  @@index([organizationId])
  @@map("auth_attempts")
}

model AuthEvent {
  id             String       @id @default(cuid())
  eventType      String       // "login", "logout", "password_change", "mfa_enabled", "account_locked", etc.
  success        Boolean
  description    String?      @db.Text
  ipAddress      String?
  userAgent      String?      @db.Text
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?        @relation(fields: [userId], references: [id])
  sessionId      String?
  metadata       Json?        // Additional event data
  createdAt      DateTime     @default(now())

  @@index([eventType])
  @@index([userId])
  @@index([success])
  @@index([createdAt])
  @@index([organizationId])
  @@map("auth_events")
}

model TeamMember {
  id             String       @id @default(cuid())
  userId         String       @unique
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           String       // "owner", "admin", "manager", "senior_cpa", "cpa", "staff", "intern"
  department     String?      // "tax", "audit", "advisory", "bookkeeping", "admin"
  title          String?      // Job title
  specializations String[]    // Areas of expertise
  hourlyRate     Decimal?     @db.Decimal(8, 2)
  isActive       Boolean      @default(true)
  hireDate       DateTime?
  terminationDate DateTime?
  permissions    TeamMemberPermission[]
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      String?
  updatedBy      String?

  @@index([organizationId])
  @@index([userId])
  @@index([role])
  @@index([isActive])
  @@map("team_members")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  category    String   // "user_management", "client_management", "document_management", "billing", "reporting", etc.
  action      String   // "create", "read", "update", "delete", "export", "import", etc.
  resource    String   // "users", "clients", "documents", "invoices", "reports", etc.
  isSystemLevel Boolean @default(false) // System-level permissions vs organization-level
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teamMemberPermissions TeamMemberPermission[]

  @@index([category])
  @@index([resource])
  @@index([action])
  @@map("permissions")
}

model TeamMemberPermission {
  id           String     @id @default(cuid())
  teamMemberId String
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  granted      Boolean    @default(true)
  grantedBy    String?
  grantedAt    DateTime   @default(now())
  revokedBy    String?
  revokedAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([teamMemberId, permissionId])
  @@index([teamMemberId])
  @@index([permissionId])
  @@map("team_member_permissions")
}

model Subscription {
  id                String       @id @default(cuid())
  organizationId    String       @unique
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  planName          String       // "trial", "starter", "professional", "enterprise"
  planType          String       // "monthly", "yearly"
  status            String       // "active", "past_due", "canceled", "incomplete", "trialing"
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd Boolean      @default(false)
  canceledAt        DateTime?
  trialStart        DateTime?
  trialEnd          DateTime?
  stripeSubscriptionId String?   @unique
  stripePriceId     String?
  stripeCustomerId  String?
  quantity          Int          @default(1)
  unitAmount        Decimal?     @db.Decimal(10, 2)
  currency          String       @default("USD")
  features          Json?        // Available features for this subscription
  limits            Json?        // Usage limits (users, clients, storage, etc.)
  usage             Json?        // Current usage stats
  metadata          Json?        // Additional subscription data
  deletedAt         DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  createdBy         String?
  updatedBy         String?

  @@index([organizationId])
  @@index([status])
  @@index([planName])
  @@index([currentPeriodEnd])
  @@map("subscriptions")
}

model QuickBooksSync {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  syncType       String // "full", "incremental", "manual", "webhook"
  entityType     String // "company", "accounts", "customers", "invoices", "reports", "transactions"
  status         String // "pending", "in_progress", "completed", "failed", "cancelled"
  startedAt      DateTime     @default(now())
  completedAt    DateTime?
  recordsTotal   Int?
  recordsProcessed Int        @default(0)
  recordsSuccess Int          @default(0)
  recordsFailed  Int          @default(0)
  errorMessage   String?      @db.Text
  errorDetails   Json?
  metadata       Json? // Additional sync context
  lastSyncCursor String? // For incremental syncs
  triggeredBy    String? // User ID or "system"
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([syncType])
  @@index([entityType])
  @@index([status])
  @@index([startedAt])
  @@map("quickbooks_syncs")
}

model QuickBooksWebhookEvent {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  eventId        String       @unique // QuickBooks webhook event ID
  eventType      String // "CREATE", "UPDATE", "DELETE", "VOID"
  entityName     String // "Customer", "Invoice", "Item", etc.
  entityId       String // QuickBooks entity ID
  realmId        String
  eventTime      DateTime // When the event occurred in QuickBooks
  status         String       @default("pending") // "pending", "processed", "failed", "ignored"
  processedAt    DateTime?
  errorMessage   String?      @db.Text
  retryCount     Int          @default(0)
  maxRetries     Int          @default(3)
  nextRetryAt    DateTime?
  payload        Json // Full webhook payload
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([eventType])
  @@index([entityName])
  @@index([status])
  @@index([eventTime])
  @@index([nextRetryAt])
  @@map("quickbooks_webhook_events")
}

model DocumentAnnotation {
  id           String    @id @default(cuid())
  documentId   String
  document     Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  type         String    // "highlight", "note", "rectangle", "arrow", "text"
  page         Int       @default(1) // For multi-page documents
  coordinates  Json      // Position data {x, y, width, height}
  content      String?   @db.Text // Annotation text content
  color        String    @default("#ffff00") // Hex color code
  style        Json?     // Additional styling properties
  isPrivate    Boolean   @default(false)
  createdBy    String
  creator      User      @relation(fields: [createdBy], references: [id])
  replies      DocumentAnnotation[] @relation("AnnotationReplies")
  parentId     String?
  parent       DocumentAnnotation? @relation("AnnotationReplies", fields: [parentId], references: [id])
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([documentId])
  @@index([createdBy])
  @@index([page])
  @@index([type])
  @@map("document_annotations")
}

model DocumentComment {
  id           String    @id @default(cuid())
  documentId   String
  document     Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  content      String    @db.Text
  isPrivate    Boolean   @default(false)
  mentions     String[]  // User IDs mentioned in comment
  attachments  Json?     // File attachments
  taskAssigned String?   // If comment creates a task
  status       String    @default("open") // "open", "resolved", "archived"
  createdBy    String
  creator      User      @relation(fields: [createdBy], references: [id])
  replies      DocumentComment[] @relation("CommentReplies")
  parentId     String?
  parent       DocumentComment? @relation("CommentReplies", fields: [parentId], references: [id])
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([documentId])
  @@index([createdBy])
  @@index([status])
  @@map("document_comments")
}

model DocumentShare {
  id           String    @id @default(cuid())
  documentId   String
  document     Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  shareType    String    // "link", "email", "user", "client"
  sharedWith   String?   // Email or user ID
  accessLevel  String    // "view", "comment", "edit"
  expiresAt    DateTime?
  downloadAllowed Boolean @default(false)
  passwordProtected Boolean @default(false)
  password     String?   // Hashed password for link shares
  viewCount    Int       @default(0)
  lastViewedAt DateTime?
  isActive     Boolean   @default(true)
  createdBy    String
  creator      User      @relation(fields: [createdBy], references: [id])
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([documentId])
  @@index([createdBy])
  @@index([shareType])
  @@index([expiresAt])
  @@map("document_shares")
}

model WorkflowTemplate {
  id             String       @id @default(cuid())
  name           String
  description    String?      @db.Text
  category       String       // "tax_preparation", "bookkeeping", "onboarding", "year_end", "compliance"
  type           String       // "monthly_bookkeeping", "tax_return_1040", "new_client_onboarding", etc.
  version        String       @default("1.0.0")
  isSystemTemplate Boolean    @default(false) // Built-in templates vs custom
  isActive       Boolean      @default(true)
  estimatedDuration Int?      // Estimated completion time in hours
  complexity     String       @default("medium") // "low", "medium", "high"
  steps          Json         // Template steps configuration
  taskTemplates  Json         // Task templates within workflow
  requirements   Json?        // Prerequisites and requirements
  settings       Json?        // Default workflow settings
  metadata       Json?        // Additional template metadata
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy      String?
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  executions     WorkflowExecution[]

  @@index([organizationId])
  @@index([category])
  @@index([type])
  @@index([isSystemTemplate])
  @@index([isActive])
  @@map("workflow_templates")
}

model WorkflowExecution {
  id             String       @id @default(cuid())
  name           String
  description    String?      @db.Text
  status         String       @default("pending") // "pending", "running", "paused", "completed", "failed", "cancelled"
  priority       String       @default("normal") // "low", "normal", "high", "urgent"
  progress       Float        @default(0) // Completion percentage 0-100
  templateId     String?
  template       WorkflowTemplate? @relation(fields: [templateId], references: [id])
  workflowId     String?
  workflow       Workflow?    @relation(fields: [workflowId], references: [id])
  engagementId   String?
  engagement     Engagement?  @relation(fields: [engagementId], references: [id])
  clientId       String?
  client         Client?      @relation(fields: [clientId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedToId   String?
  assignedTo     User?        @relation("WorkflowExecutionAssignee", fields: [assignedToId], references: [id])
  startedAt      DateTime?
  scheduledFor   DateTime?
  dueDate        DateTime?
  completedAt    DateTime?
  cancelledAt    DateTime?
  pausedAt       DateTime?
  resumedAt      DateTime?
  currentStepIndex Int        @default(0)
  configuration  Json?        // Execution-specific configuration
  context        Json?        // Execution context and variables
  errorMessage   String?      @db.Text
  errorDetails   Json?        // Detailed error information
  retryCount     Int          @default(0)
  maxRetries     Int          @default(3)
  isRecurring    Boolean      @default(false)
  cronExpression String?      // For recurring workflows
  nextRunAt      DateTime?
  lastRunAt      DateTime?
  createdBy      String
  createdById    User         @relation("WorkflowExecutionCreator", fields: [createdBy], references: [id])
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  taskExecutions TaskExecution[]
  queueItems     TaskQueueItem[]

  @@index([organizationId])
  @@index([templateId])
  @@index([workflowId])
  @@index([engagementId])
  @@index([clientId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([scheduledFor])
  @@index([dueDate])
  @@index([nextRunAt])
  @@index([isRecurring])
  @@map("workflow_executions")
}

model TaskExecution {
  id                String            @id @default(cuid())
  title             String
  description       String?           @db.Text
  status            String            @default("pending") // "pending", "ready", "running", "completed", "failed", "skipped", "cancelled"
  priority          String            @default("normal") // "low", "normal", "high", "urgent"
  taskType          String            // "document_review", "data_entry", "client_meeting", "preparation", "review", "approval"
  stepIndex         Int               // Order in workflow
  estimatedHours    Decimal?
  actualHours       Decimal?
  startedAt         DateTime?
  dueDate           DateTime?
  completedAt       DateTime?
  assignedToId      String?
  assignedTo        User?             @relation("TaskExecutionAssignee", fields: [assignedToId], references: [id])
  workflowExecutionId String
  workflowExecution WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  parentTaskId      String?
  parentTask        TaskExecution?    @relation("TaskExecutionDependencies", fields: [parentTaskId], references: [id])
  dependentTasks    TaskExecution[]   @relation("TaskExecutionDependencies")
  dependencies      Json?             // Task dependency configuration
  blockers          Json?             // Current blockers preventing execution
  inputs            Json?             // Input data for task
  outputs           Json?             // Output data from task
  checklist         Json?             // Task checklist items
  configuration     Json?             // Task-specific configuration
  errorMessage      String?           @db.Text
  errorDetails      Json?             // Detailed error information
  retryCount        Int               @default(0)
  maxRetries        Int               @default(3)
  organizationId    String
  organization      Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy         String
  deletedAt         DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([organizationId])
  @@index([workflowExecutionId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([stepIndex])
  @@index([dueDate])
  @@map("task_executions")
}

model TaskQueueItem {
  id                  String            @id @default(cuid())
  queueName           String            // "high_priority", "normal", "background", "scheduled"
  itemType            String            // "workflow_execution", "task_execution", "report_generation", "email_notification"
  entityId            String            // ID of the entity being processed
  entityType          String            // Type of entity (workflow_execution, task_execution, etc.)
  status              String            @default("pending") // "pending", "processing", "completed", "failed", "cancelled"
  priority            Int               @default(0) // Higher number = higher priority
  attempts            Int               @default(0)
  maxAttempts         Int               @default(3)
  scheduledFor        DateTime?         // When to process this item
  startedAt           DateTime?
  completedAt         DateTime?
  failedAt            DateTime?
  nextRetryAt         DateTime?
  payload             Json?             // Additional data needed for processing
  result              Json?             // Processing result
  errorMessage        String?           @db.Text
  errorDetails        Json?             // Detailed error information
  processingLockId    String?           // Prevents concurrent processing
  lockAcquiredAt      DateTime?
  lockExpiresAt       DateTime?
  workflowExecutionId String?
  workflowExecution   WorkflowExecution? @relation(fields: [workflowExecutionId], references: [id])
  organizationId      String
  organization        Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy           String?
  deletedAt           DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([organizationId])
  @@index([queueName])
  @@index([status])
  @@index([priority])
  @@index([scheduledFor])
  @@index([nextRetryAt])
  @@index([entityId, entityType])
  @@index([processingLockId])
  @@index([lockExpiresAt])
  @@map("task_queue_items")
}

// Enhanced security and audit models
model UserSession {
  id             String       @id @default(cuid())
  sessionToken   String       @unique
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  ipAddress      String?
  userAgent      String?      @db.Text
  location       Json?        // Geo location data
  deviceInfo     Json?        // Device fingerprint
  isActive       Boolean      @default(true)
  lastAccessAt   DateTime     @default(now())
  expiresAt      DateTime
  revokedAt      DateTime?
  revokedBy      String?
  revokedReason  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([userId])
  @@index([organizationId])
  @@index([sessionToken])
  @@index([isActive])
  @@index([expiresAt])
  @@index([lastAccessAt])
  @@map("user_sessions")
}

model ApiKey {
  id             String       @id @default(cuid())
  name           String       // Human-readable name
  keyHash        String       @unique // Hashed API key
  keyPrefix      String       // First 8 chars for identification
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy      String
  creator        User         @relation("ApiKeyCreator", fields: [createdBy], references: [id])
  permissions    Json         // API permissions
  scopes         String[]     // API scopes
  isActive       Boolean      @default(true)
  lastUsedAt     DateTime?
  expiresAt      DateTime?
  rateLimit      Int?         // Requests per minute
  ipWhitelist    String[]     // Allowed IP addresses
  metadata       Json?        // Additional metadata
  usageCount     Int          @default(0)
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  usageLogs      ApiKeyUsage[]

  @@index([organizationId])
  @@index([createdBy])
  @@index([keyHash])
  @@index([keyPrefix])
  @@index([isActive])
  @@index([expiresAt])
  @@map("api_keys")
}

model ApiKeyUsage {
  id           String   @id @default(cuid())
  apiKeyId     String
  apiKey       ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  endpoint     String
  method       String   // GET, POST, PUT, DELETE
  ipAddress    String?
  userAgent    String?  @db.Text
  statusCode   Int
  responseTime Int      // Response time in milliseconds
  requestSize  Int?     // Request size in bytes
  responseSize Int?     // Response size in bytes
  error        String?  @db.Text
  metadata     Json?    // Additional request metadata
  timestamp    DateTime @default(now())

  @@index([apiKeyId])
  @@index([endpoint])
  @@index([timestamp])
  @@index([statusCode])
  @@map("api_key_usage")
}

model SecurityEvent {
  id             String       @id @default(cuid())
  eventType      String       // "suspicious_login", "rate_limit_exceeded", "unauthorized_access", etc.
  severity       String       // "low", "medium", "high", "critical"
  description    String       @db.Text
  ipAddress      String?
  userAgent      String?      @db.Text
  userId         String?
  user           User?        @relation(fields: [userId], references: [id])
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  resourceType   String?      // "user", "client", "document", etc.
  resourceId     String?
  riskScore      Int?         // 0-100 risk score
  resolved       Boolean      @default(false)
  resolvedAt     DateTime?
  resolvedBy     String?
  resolver       User?        @relation("SecurityEventResolver", fields: [resolvedBy], references: [id])
  metadata       Json?        // Additional event data
  createdAt      DateTime     @default(now())

  @@index([eventType])
  @@index([severity])
  @@index([userId])
  @@index([organizationId])
  @@index([resolved])
  @@index([createdAt])
  @@index([riskScore])
  @@map("security_events")
}

model DataExport {
  id             String       @id @default(cuid())
  requestedBy    String
  requester      User         @relation(fields: [requestedBy], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  exportType     String       // "client_data", "financial_data", "all_data", etc.
  status         String       @default("pending") // "pending", "processing", "completed", "failed", "expired"
  parameters     Json?        // Export parameters (date range, filters, etc.)
  fileUrl        String?      // URL to download exported file
  fileName       String?
  fileSize       BigInt?
  recordCount    Int?         // Number of records exported
  reason         String?      @db.Text // Reason for export request
  approvedBy     String?
  approver       User?        @relation("DataExportApprover", fields: [approvedBy], references: [id])
  approvedAt     DateTime?
  completedAt    DateTime?
  expiresAt      DateTime?    // When the download link expires
  downloadCount  Int          @default(0)
  lastDownloadAt DateTime?
  error          String?      @db.Text
  metadata       Json?        // Additional export metadata
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([requestedBy])
  @@index([organizationId])
  @@index([status])
  @@index([exportType])
  @@index([expiresAt])
  @@index([createdAt])
  @@map("data_exports")
}

model ComplianceEvent {
  id             String       @id @default(cuid())
  eventType      String       // "gdpr_request", "data_breach", "audit_access", etc.
  description    String       @db.Text
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?        @relation(fields: [userId], references: [id])
  resourceType   String?      // Type of resource affected
  resourceId     String?      // ID of affected resource
  dataTypes      String[]     // Types of data involved
  severity       String       // "low", "medium", "high"
  status         String       @default("open") // "open", "investigating", "resolved", "closed"
  dueDate        DateTime?    // Compliance deadline
  assignedTo     String?
  assignee       User?        @relation("ComplianceEventAssignee", fields: [assignedTo], references: [id])
  resolution     String?      @db.Text
  resolvedAt     DateTime?
  evidence       Json?        // Supporting evidence/documentation
  notifiedParties Json?       // Who was notified (regulators, customers, etc.)
  metadata       Json?        // Additional compliance data
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([eventType])
  @@index([organizationId])
  @@index([severity])
  @@index([status])
  @@index([dueDate])
  @@index([assignedTo])
  @@index([createdAt])
  @@map("compliance_events")
}

model RolePermission {
  id           String     @id @default(cuid())
  role         String     // "owner", "admin", "manager", "cpa", "staff", etc.
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  granted      Boolean    @default(true)
  conditions   Json?      // Conditional permissions (time-based, resource-based)
  grantedBy    String?
  grantedAt    DateTime   @default(now())
  revokedBy    String?
  revokedAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([role, permissionId])
  @@index([role])
  @@index([permissionId])
  @@map("role_permissions")
}
